---

### **1. What is an event in JavaScript?**

JavaScript માં event એ એક ઘટના છે જે યુઝર ઇન્ટરએકશન્સ (જેમ કે ક્લિક્સ, કીપ્રેસ વગેરે) અથવા બ્રાઉઝરની બીજા તત્વો દ્વારા ટ્રિગર થઈ શકે છે, જેમ કે પેજ લોડ થવું અથવા રીઝાઈઝ થવું.

---

### **2. What is event handling in JavaScript?**

JavaScript માં event handling એ યુઝરના actions કે બીજા events (જેમ કે માઉસ ક્લિક્સ અથવા કીબોર્ડ ઇનપુટ) પર રિસ્પોન્ડ કરવાની પ્રોસેસ છે. આનું કાર્ય HTML elements પર event listeners જોડીને કરવામાં આવે છે.

---

### **3. JavaScript માં event listener શું છે?**

Event listener એ JavaScript માં એક ફંક્શન છે જે ચોક્કસ ઇવેન્ટના घटનાને સંભળાવવાનું કામ કરે છે. જ્યારે તે ઇવેન્ટ ચોક્કસ એલેમેન્ટ પર થાય છે, ત્યારે તે callback function ને ચલાવે છે.

```javascript
element.addEventListener('click', function() {
    alert('એલેમેન્ટ ક્લિક કરાયું!');
});
```

Explanation in Gujarati:
Event listener એ એક ફંક્શન છે જે કંઈક ઇવેન્ટ થાય તે માટે રાહ જુઓ છે (જેમ કે ક્લિક, ડબલ ક્લિક, વગેરે). જ્યારે તે ઇવેન્ટ એ પરિપ્રેક્ષિત (element) પર થાય છે, ત્યારે તે કોડને એક્ઝીક્યુટ કરે છે.

---

### **4. `addEventListener()` method શું છે?**

`addEventListener()` મેટોડનો ઉપયોગ કોઈ ચોક્કસ એલેમેન્ટ પર ઇવેન્ટ હેન્ડલર (handler)ને એડ કરવા માટે થાય છે, જે નવા ઇવેન્ટ હેન્ડલર દ્વારા પહેલાથી હાજર ઈવેન્ટ હેન્ડલર્સને ઓવરરાઇટ (overwrite) કર્યા વિના કરવામાં આવે છે.

```javascript
element.addEventListener('click', function() {
    alert('એલેમેન્ટ ક્લિક કરાયું!');
});
```

Explanation in Gujarati:
`addEventListener()` મેટોડનો ઉપયોગ એલેમેન્ટ પર ઈવેન્ટ સનસેણી (listener) જોડી આપવા માટે થાય છે. આ રીતે, એકથી વધુ હેન્ડલર્સ એડ કરી શકાય છે અને કોઈપણ પદાવલીના ઇવેન્ટ હેન્ડલર્સને અસર કરવાના વિના.
```

---

### **5. `removeEventListener()` method શું છે?**

`removeEventListener()` મેટોડનો ઉપયોગ એ એક ઇવેન્ટ લિસ્નર (listener)ને દૂર કરવા માટે થાય છે જે પહેલા એલેમેન્ટ પર એડ કરવામાં આવ્યો હતો.

```javascript
const handleClick = function() {
    alert('એલેમેન્ટ ક્લિક કરાયું!');
};

element.addEventListener('click', handleClick);
element.removeEventListener('click', handleClick);
``` 

Explanation in Gujarati:
`removeEventListener()` નો ઉપયોગ ત્યારે થાય છે જ્યારે આપણે કઈ ચોક્કસ ઇવેન્ટ માટેના લિસ્નરને દૂર કરવાનું હોય, જે પહેલા એડ કરવામાં આવ્યો હોય.

---

### **6. `addEventListener()` અને `onclick` વચ્ચે શું ભિન્નતા છે?**  
- **`addEventListener()`** એ એજ ઇવેંટ માટે એકજ એલીમેન્ટ પર એકથી વધુ ઇવેંટ લિસનર જોડવા માટે પરવાનગી આપે છે.  
- **`onclick`** માત્ર એક જ ઇવેંટ હેન્ડલર રાખી શકે છે, અને એ માત્ર એક જ હેન્ડલરને સમર્થન આપે છે, અને કોઈ પણ પદ્ધતિ અગાઉના હેન્ડલરને ઓવરરાઇટ (મ overwritten) કરી દે છે.

---

### **7. જાવાસ્ક્રિપ્ટમાં ઇવેંટ પ્રોપેગેશન શું છે?**  
ઇવેંટ પ્રોપેગેશન એ એલીમેન્ટ્સ દ્વારા DOMમાં ઇવેંટના પ્રાપ્ત થવાની ક્રમને સંદર્ભિત કરે છે. આએ **બબલિંગ** અથવા **કેપ્ચરિંગ** હોઈ શકે છે:
- **બબલિંગ**: ઇવેંટ લક્ષ્ય એલીમેન્ટમાંથી શરૂ થાય છે અને રૂટ સુધી બબલ થાય છે.
- **કેપ્ચરિંગ**: ઇવેંટ રૂટથી શરૂ થાય છે અને લક્ષ્ય એલીમેન્ટ સુધી પહોંચે છે.

---

### **8. ઇવેંટ બબલિંગ શું છે?**  
ઇવેંટ બબલિંગ એ ઇવેંટ પ્રોપેગેશનનો એક પ્રકાર છે, જેમાં ઇવેંટ લક્ષ્ય એલીમેન્ટમાંથી શરૂ થાય છે અને પછી પેરેન્ટ એલીમેન્ટ્સ મારફતે DOMના રૂટ સુધી "બબલ" થાય છે.

---

### **9. ઇવેંટ કેપચરિંગ શું છે?**  
ઇવેંટ કેપચરિંગ (અથવા ટ્રિકલિંગ) એ ઇવેંટ બબલિંગનો વિપરીત છે. આમાં ઇવેંટ રૂટ એલીમેન્ટમાંથી શરૂ થાય છે અને લક્ષ્ય એલીમેન્ટ સુધી પહોંચે છે.

---

### **10. તમે ઇવેંટ પ્રોપેગેશન કેવી રીતે અટકાવી શકો છો?**  
ઇવેંટ પ્રોપેગેશન અટકાવવા માટે, તમે ઇવેંટ ઓબ્જેક્ટ પર `stopPropagation()` મેડથડનો ઉપયોગ કરી શકો છો:

```javascript  
element.addEventListener('click', function(event) {  
    event.stopPropagation();  
});  
```

---

### **11. `preventDefault()` મેડથડ શું છે?**  
`preventDefault()` મેડથડનો ઉપયોગ ઇવેંટ સાથે સંકળાયેલા ડિફોલ્ટ ઍકશનને અટકાવવાનું થાય છે. ઉદાહરણ તરીકે, તે ફોર્મ સબમિશન અથવા લિંક નાવિગેશનને રોકવા માટે ઉપયોગમાં લાવી શકાય છે.  

```javascript  
element.addEventListener('submit', function(event) {  
    event.preventDefault();  
});  
```
```

---

### **12. JavaScriptમાં માઉસ ઇવેંટના વિવિધ પ્રકારો શું છે?**  
- **`click`**: જ્યારે એલીમેન્ટ પર ક્લિક કરવામાં આવે છે ત્યારે આ ઇવેંટ ટ્રિગર થાય છે.  
- **`dblclick`**: જ્યારે એલીમેન્ટ પર ડબલ-ક્લિક કરવામાં આવે છે ત્યારે આ ઇવેંટ ટ્રિગર થાય છે.  
- **`mousedown`**: જ્યારે માઉસ બટન દબાવવામાં આવે છે ત્યારે આ ઇવેંટ ટ્રિગર થાય છે.  
- **`mouseup`**: જ્યારે માઉસ બટન છૂટે છે ત્યારે આ ઇવેંટ ટ્રિગર થાય છે.  
- **`mousemove`**: જ્યારે માઉસ એલીમેન્ટ પર હલચલ કરે છે ત્યારે આ ઇવેંટ ટ્રિગર થાય છે.  

---

### **13. JavaScriptમાં કીબોર્ડ ઇવેંટના વિવિધ પ્રકારો શું છે?**  
- **`keydown`**: જ્યારે કી દબાય છે ત્યારે આ ઇવેંટ ટ્રિગર થાય છે.  
- **`keyup`**: જ્યારે કી છૂટે છે ત્યારે આ ઇવેંટ ટ્રિગર થાય છે.  
- **`keypress`**: આ હવે ડીપ્રેકેટેડ છે. જ્યારે કી દબાય છે અને છોડવામાં આવે છે ત્યારે આ ઇવેંટ ટ્રિગર થાય છે.

---

### **14. `onload` ઇવેંટ શું છે?**  
`onload` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે કોઈ સ્રોત (જેમ કે ઇમેજ અથવા સ્ક્રિપ્ટ) સફળતાપૂર્વક લોડ થઈ જાય છે.  

```javascript  
window.onload = function() {  
    console.log('Page has loaded!');  
};  
```

---

### **15. `onresize` ઇવેંટ શું છે?**  
`onresize` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે બ્રાઉઝર વિન્ડોનું કદ બદલાય છે.  

```javascript  
window.onresize = function() {  
    console.log('Window resized!');  
};  
```

---

### **16. `onscroll` ઇવેંટ શું છે?**  
`onscroll` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે કોઈ એલીમેન્ટ સ્ક્રોલ થાય છે, જેમ કે જ્યારે યૂઝર પેજને સ્ક્રોલ કરે છે અથવા સ્ક્રોલેબલ કન્ટેનર.  

```javascript  
window.onscroll = function() {  
    console.log('Page scrolled!');  
};  
```

---

### **17. `focus` ઇવેંટ શું છે?**  
`focus` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે એલીમેન્ટ (સામાન્ય રીતે ઇનપુટ અથવા ટેક્સ્ટએરિયા) ફોકસ પ્રાપ્ત કરે છે.  

```javascript  
element.addEventListener('focus', function() {  
    console.log('Input focused!');  
});  
```

---

### **18. `blur` ઇવેંટ શું છે?**  
`blur` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે એલીમેન્ટ ફોકસ ગુમાવા.  

```javascript  
element.addEventListener('blur', function() {  
    console.log('Input lost focus!');  
});  
```

---

### **19. `change` ઇવેંટ શું છે?**  
`change` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે ઇનપુટ, સિલેક્ટ, અથવા ટેક્સ્ટએરિયા એલીમેન્ટનો મલ્ય બદલાય અને એલીમેન્ટ ફોકસ ગુમાવા.  

```javascript  
element.addEventListener('change', function() {  
    console.log('Value changed!');  
});  
```

---

### **20. `submit` ઇવેંટ શું છે?**  
`submit` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે ફોર્મ સબમિટ કરવામાં આવે છે.  

```javascript  
form.addEventListener('submit', function(event) {  
    event.preventDefault();  
    console.log('Form submitted!');  
});  
```

---

### **21. `input` ઇવેંટ શું છે?**  
`input` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે યુઝર ટાઇપ કરતી વખતે ઇનપુટ અથવા ટેક્સ્ટએરિયા એલીમેન્ટનો મલ્ય બદલાય છે.  

```javascript  
element.addEventListener('input', function() {  
    console.log('Input value changed!');  
});  
```

---

### **22. `DOMContentLoaded` ઇવેંટ શું છે?**  
`DOMContentLoaded` ઇવેંટ ત્યારે ફાયર થાય છે જ્યારે HTML સંપૂર્ણપણે લોડ અને પાર્સ થઈ જાય છે, પરંતુ આઇમેજેસ, સ્ટાઇલશીટ અને અન્ય સ્રોતો લોડ થવાની પ્રક્રિયા પૂર્ણ નથી થઈ.  

```javascript  
document.addEventListener('DOMContentLoaded', function() {  
    console.log('DOM fully loaded and parsed!');  
});  
```

---

### **23. Event delegation શું છે?**  
Event delegation એ એક તકનીક છે જેમાં એક પેરન્ટ એલીમેન્ટ પર એક જ ઇવેંટ લિસનર એડ કરવામાં આવે છે જેથી તે મલ્ટિપલ ચાઇલ્ડ એલીમેન્ટ્સ માટે ઇવેંટ્સને હેન્ડલ કરી શકે છે, જે ઇવેંટ લિસનર્સની સંખ્યા ઘટાડે છે.  

```javascript  
document.querySelector('#parent').addEventListener('click', function(event) {  
    if (event.target && event.target.matches('button')) {  
        console.log('Button clicked!');  
    }  
});  
```

---

### **24. `target` પ્રોપર્ટી શું છે?**  
`target` પ્રોપર્ટી એ એલીમેન્ટને સંકેત કરે છે જે ઇવેંટને ટ્રિગર કરે છે. આથી તમે એલીમેન્ટ સુધી પહોંચ શકો છો જેમણે ઇવેંટ શરૂ કર્યું.  

```javascript  
element.addEventListener('click', function(event) {  
    console.log(event.target); // Logs the clicked element  
});  
```

---

### **25. `currentTarget` પ્રોપર્ટી શું છે?**  
`currentTarget` પ્રોપર્ટી એ એલીમેન્ટને સંકેત કરે છે જેમાં ઇવેંટ લિસનર એડ કરાયેલો છે. તે `target` થી જુદું હોઈ શકે છે, ખાસ કરીને ઇવેંટ ડિલીગેશનના કેસમાં.  

```javascript  
element.addEventListener('click', function(event) {  
    console.log(event.currentTarget); // Logs the element the listener is attached to  
});  
```

---

### **26. `keyboardEvent` શું છે?**  
`keyboardEvent` એ એક ઇવેંટ છે જે ત્યારે થાય છે જ્યારે યૂઝર કીબોર્ડ સાથે ક્રિયા કરે છે, જેમ કે કોઈ કી દબાવવી અથવા છોડી દેવું. આ ઇવેંટ pressed key વિશે માહિતી આપે છે જેમ કે `key`, `keyCode`, અને `which` જેવી પ્રોપર્ટીઓ દ્વારા.

---

### **27. તમે event નું ડિફૉલ્ટ વર્તન કેવી રીતે રોકી શકો છો?**  
`event.preventDefault()` મેથડ નો ઉપયોગ કરો. ઉદાહરણ તરીકે, ફોર્મ સબમિશનને રોકવું:  
```javascript  
form.addEventListener('submit', function(event) {  
    event.preventDefault();  
    console.log('Form submission prevented!');  
});  
```

---

### **28. `mousemove` ઇવેંટ શું છે?**  
`mousemove` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે માઉસ કોઈ એલીમેન્ટ પર હલવાય છે.  

```javascript  
element.addEventListener('mousemove', function(event) {  
    console.log('Mouse moved at: ' + event.clientX + ', ' + event.clientY);  
});  
```
```

---

### **29. `mouseenter` અને `mouseleave` ઇવેંટ શું છે?**  
- **mouseenter**: જ્યારે માઉસ પોઈન્ટર એલીમેન્ટમાં પ્રવેશ કરે છે ત્યારે ફાયર થાય છે (આ બબલ નથી થતું).  
- **mouseleave**: જ્યારે માઉસ પોઈન્ટર એલીમેન્ટમાંથી બહાર નીકળી જાય છે ત્યારે ફાયર થાય છે (આ બબલ નથી થતું).

---

### **30. `drag` ઇવેંટ શું છે?**  
`drag` ઇવેંટ ત્યારે ટ્રિગર થાય છે જ્યારે કોઈ એલીમેન્ટ ખેચવામાં આવી રહ્યું હોય.  

```javascript  
element.addEventListener('drag', function() {  
    console.log('Element is being dragged');  
});  
```

---

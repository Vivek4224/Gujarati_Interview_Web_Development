Here’s a list of **30 questions and answers** about **functions in JavaScript**, covering basics, advanced topics, and common use cases. 

---

### **1. What is a function in JavaScript?**
A function is a reusable block of code designed to perform a particular task when called.

```javascript
function greet() {
  console.log("Hello, World!");
}
```

---

### **2. How do you declare a function in JavaScript?**
You can declare a function using the `function` keyword:
```javascript
function add(a, b) {
  return a + b;
}
```

---

### **3. How do you call a function in JavaScript?**
You call a function by using its name followed by parentheses:
```javascript
add(2, 3); // 5
```

---

### **4. What are the types of functions in JavaScript?**
1. **Named functions**:
   ```javascript
   function greet() {
     console.log("Hello");
   }
   ```
2. **Anonymous functions** (used as expressions):
   ```javascript
   const greet = function() {
     console.log("Hello");
   };
   ```
3. **Arrow functions**:
   ```javascript
   const greet = () => console.log("Hello");
   ```

---

### **5. What are parameters and arguments in a function?**
- **Parameters** are placeholders defined in the function declaration:
  ```javascript
  function add(a, b) {
    return a + b;
  }
  ```
- **Arguments** are actual values passed when calling the function:
  ```javascript
  add(2, 3); // Arguments: 2, 3
  ```

---

### **6. What is the difference between `return` and `console.log()`?**
- `return` outputs a value from a function and ends its execution.
- `console.log()` prints a value to the console but does not affect the function's return value.

---

### **7. What is a default parameter?**
Default parameters provide a default value if no argument is passed:
```javascript
function greet(name = "Guest") {
  console.log(`Hello, ${name}`);
}
greet(); // "Hello, Guest"
```

---

### **8. What is an arrow function?**
Arrow functions are a shorthand way of writing functions. They do not have their own `this` context.

```javascript
const add = (a, b) => a + b;
```

---

### **9. What is the difference between function expressions and function declarations?**
- **Function Declaration**: Hoisted, can be used before it's defined.
  ```javascript
  function greet() {
    console.log("Hello");
  }
  ```
- **Function Expression**: Not hoisted, must be defined before use.
  ```javascript
  const greet = function () {
    console.log("Hello");
  };
  ```

---

### **10. What is an IIFE (Immediately Invoked Function Expression)?**
An IIFE is a function that runs as soon as it’s defined:
```javascript
(function () {
  console.log("IIFE executed!");
})();
```

---

### **11. What is a pure function?**
A pure function always produces the same output for the same inputs and has no side effects.

```javascript
function add(a, b) {
  return a + b;
}
```

---

### **12. What is the `this` keyword in a function?**
`this` refers to the context in which the function is executed. Its value depends on how the function is called.

---

### **13. How do you pass a function as an argument?**
Functions can be passed as arguments to other functions (callback functions):
```javascript
function greet(callback) {
  callback();
}
greet(() => console.log("Hello"));
```

---

### **14. What is a higher-order function?**
A function that takes another function as an argument or returns a function:
```javascript
function higherOrder(fn) {
  return fn();
}
```

---

### **15. How do you return a function from another function?**
```javascript
function outer() {
  return function inner() {
    console.log("Returned function");
  };
}
const inner = outer();
inner(); // "Returned function"
```

---

### **16. What is a callback function?**
A callback is a function passed into another function to be executed later:
```javascript
function fetchData(callback) {
  setTimeout(() => {
    console.log("Data fetched");
    callback();
  }, 1000);
}
fetchData(() => console.log("Callback executed"));
```

---

### **17. What is function hoisting?**
Function declarations are hoisted, meaning they can be used before they are defined:
```javascript
greet(); // "Hello"
function greet() {
  console.log("Hello");
}
```

---

### **18. What is the rest parameter in a function?**
It collects all remaining arguments into an array:
```javascript
function sum(...nums) {
  return nums.reduce((a, b) => a + b, 0);
}
console.log(sum(1, 2, 3)); // 6
```

---

### **19. What is the difference between `apply()`, `call()`, and `bind()`?**
1. **`call()`**: Invokes a function with arguments passed individually.
   ```javascript
   func.call(context, arg1, arg2);
   ```
2. **`apply()`**: Invokes a function with arguments passed as an array.
   ```javascript
   func.apply(context, [arg1, arg2]);
   ```
3. **`bind()`**: Returns a new function with a bound context.
   ```javascript
   const boundFunc = func.bind(context);
   ```

---

### **20. What are closures in JavaScript?**
A closure is a function that retains access to its lexical scope even when executed outside of that scope:
```javascript
function outer() {
  const msg = "Hello";
  return function inner() {
    console.log(msg);
  };
}
const innerFunc = outer();
innerFunc(); // "Hello"
```

---

### **21. How do you define a function with optional arguments?**
Use default parameters:
```javascript
function greet(name, message = "Welcome") {
  console.log(`${message}, ${name}`);
}
```

---

### **22. What is recursion in JavaScript?**
A function that calls itself:
```javascript
function factorial(n) {
  return n === 0 ? 1 : n * factorial(n - 1);
}
console.log(factorial(5)); // 120
```

---

### **23. What are anonymous functions?**
Functions without a name:
```javascript
const greet = function () {
  console.log("Hello");
};
```

---

### **24. What is memoization?**
Memoization is an optimization technique where function results are cached:
```javascript
const memoizedAdd = (() => {
  const cache = {};
  return (num) => {
    if (num in cache) return cache[num];
    cache[num] = num + 10;
    return cache[num];
  };
})();
console.log(memoizedAdd(5)); // 15
```

---

### **25. Can a function return multiple values?**
Yes, by returning an array or object:
```javascript
function getDetails() {
  return [1, "John"];
}
// OR
function getDetails() {
  return { id: 1, name: "John" };
}
```

---

### **26. How do you handle asynchronous functions?**
Using `async/await`:
```javascript
async function fetchData() {
  const response = await fetch("https://api.example.com");
  return response.json();
}
```

---

### **27. What is the difference between `var`, `let`, and `const` in functions?**
- `var`: Function-scoped, hoisted.
- `let` and `const`: Block-scoped, not hoisted.

---

### **28. How do you define an immediately invoked async function?**
```javascript
(async () => {
  const data = await fetch("https://api.example.com");
  console.log(data);
})();
```

---

### **29. What is a generator function?**
A function that can pause execution and yield values:
```javascript
function* generator() {
  yield 1;
  yield 2;
}
const gen = generator();
console.log(gen.next().value); // 1
```

---

### **30. How do you debug a function?**
Using `console.log()`, breakpoints in the browser, or `debugger` keyword:
```javascript
function debugFunc() {
  debugger;
  console.log("Debugging...");
}
debugFunc();
```

---
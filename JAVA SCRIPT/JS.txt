1. What is JavaScript?
ans:- JavaScript એ એક ઓબ્જેક્ટ based પ્રોગ્રામિંગ language છે, જે મુખ્યત્વે HTML પેજ સાથે ક્લાયન્ટ-સાઇડ પ્રોગ્રામિંગ language તરીકે ઉપયોગ કરવામાં આવે છે, જેથી એમાં થોડું વર્તન (behavior) ઉમેરવામાં આવે.

પ્રથમ, JavaScript માત્ર બ્રાઉઝર માટે બનાવવામાં આવી હતી, પરંતુ હવે તે સર્વર અથવા કોઈપણ ક્લાયન્ટ પર ચલાવવામાં આવી શકે છે, જેમણે JavaScript એન્જિન ધરાવવી હોય. Node.js, MongoDB, jaggery.js, ASP જેવા પ્રોડક્ટ્સ સર્વર-સાઇડ JavaScript નો ઉપયોગ કરે છે.

બ્રાઉઝર માં JavaScript ઘણા કામો કરી શકે છે જેમ કે નીચે દર્શાવેલા છે:

HTML એલિમેન્ટ્સને મેનિપ્યુલેટ કરવું.
યૂઝર એકશન પર પ્રતિસાદ આપવો, જેમ કે જ્યારે યૂઝર માઉસ ક્લિક કરે અથવા કીબોર્ડનો ઉપયોગ કરે ત્યારે Event ચલાવવી.
રિમોટ સર્વર પર રિક્વેસ્ટ મોકલવી.
ફાઇલો ડાઉનલોડ અને અપલોડ કરવી.
કૂકીઝ મેળવી અને સેટ કરવી અને ક્લાયન્ટ-સાઇડ સ્ટોરેજ (લોકલ અને સેશન સ્ટોરેજ) હેન્ડલ કરવું.

JavaScript નો ઉપયોગ કરવાની મુખ્ય ફાયદાઓ:
HTML/CSS સાથે સંપૂર્ણ ઈન્ટિગ્રેશન.
બધા મુખ્ય બ્રાઉઝર્સ દ્વારા સપોર્ટેડ, જે સ્વચ્છ રીતે ડિફોલ્ટ પર ચાલુ હોય છે.



2. What is ECMAScript?

Ans: ECMAScript એ એક સ્ક્રિપ્ટિંગ ભાષા છે જે ECMA International દ્વારા ECMA-262 માં સ્ટાન્ડર્ડાઈઝ કરવામાં આવી છે. ActionScript, JavaScript અને ઘણી બીજી સ્ક્રિપ્ટિંગ ભાષાઓ માં ECMAScript ઉપયોગમાં લેવામાં આવે છે. એમાં, JavaScript એ એક પ્રખ્યાત ક્લાયન્ટ-સાઇડ સ્ક્રિપ્ટિંગ ભાષા છે અને ECMAScript નું એક implementation છે, કારણ કે આ સ્ટાન્ડર્ડ પ્રકાશિત થયો હતો. હાલનું વર્ઝન ECMAScript 6 છે.

ECMAScript સામાન્ય રીતે JavaScript નું સ્ટાન્ડર્ડાઈઝડ વર્ઝન છે અને એક સામાન્ય ઉદ્દેશ માટેની પ્રોગ્રામિંગ ભાષા છે, જે JavaScript અને અન્ય ભાષાઓમાં અમલમાં આવે છે. એ એક સ્ક્રિપ્ટિંગ ભાષા છે જેના પર આધારિત બ્રાઉઝર-આધારિત JavaScript અને Node.js પણ વિકસિત થયા છે.



3. Which data types are supported by JavaScript?

Ans: JavaScript એ ડાયનેમિકલી ટાઇપ્ડ ભાષા છે, એટલે કે, ત્યાં એક ડેટા ટાઇપ છે, પરંતુ તે ચોક્કસ પ્રકાર સાથે બાઉન્ડ નથી. ઉદાહરણ તરીકે, જ્યારે વેરીએબલને ઇનિશિયાલાઈઝ કરવામાં આવે છે, તે સ્ટ્રિંગ પ્રકારનો હોઈ શકે છે, પરંતુ પછી તે નમ્બર મૂલ્ય પણ ધારણ કરી શકે છે.

JavaScript માં બે પ્રકારના ડેટા ટાઇપ્સ સપોર્ટ કરવામાં આવે છે: પ્રિમિટિવ ડેટા ટાઇપ્સ અને નોન-પ્રિમિટિવ ડેટા ટાઇપ્સ. નીચે JavaScript માં સપોર્ટ થયેલ કેટલાક ડેટા ટાઇપ્સ છે:

I. પ્રિમિટિવ ડેટા ટાઇપ્સ (Primitive Data Types):
String: ટેક્સ્ટ અથવા શબ્દોની શ્રેણી.
Number: આલ્જિબ્રાઇક અને એન્ટિગર નંબર્સ.
Boolean: સત્ય (true) અથવા ખોટું (false) મૂલ્ય.
Undefined: જ્યારે કોઈ વેરીએબલને મૂલ્ય આપાયું નથી ત્યારે તે undefined હોય છે.
Null: ખાલી અથવા ગેરમુલ્ય અથવા એન્શિઅલાઈઝ્ડ નથી થયેલું મૂલ્ય.
Symbol: અનન્ય અને અપક્ષય મૂલ્ય (ES6 માં ઉમેરાયું).
BigInt: મોટા પરિમાણોની સંખ્યા (ES11 માં ઉમેરાયું).

II. નોન-પ્રિમિટિવ ડેટા ટાઇપ્સ (Non-Primitive Data Types):
Object: કી-વેલ્યુ પેર માટે સ્ટોર કરાયેલી આકૃતિઓ (જેમ કે એરે, ફંક્શન, વગેરે).
Array: સંખ્યાબંધ વેલ્યુઝની શ્રેણી (જેને ઇન્ડેક્સ દ્વારા ઍક્સેસ કરી શકાય છે).
Function: કોઈ ખાસ કાર્ય માટે લખાયેલા કોડના બ્લોક.



4. What is the difference between undefined and not defined?

Ans:

હવે નીચેના ઉદાહરણ પર ધ્યાન દયી લો:
 Example 1 (undefined):
   var x;
   console.log(x);

   આ ઉદાહરણમાં, `x` એ ડિકલેર કરેલું છે, પરંતુ તેને કોઈ મૂલ્ય અસાઇન કરવામાં આવ્યું નથી. જ્યારે તમે કન્સોલમાં `x`ને લોગ કરશો, ત્યારે "undefined" મેસેજ મળશે. આનો અર્થ એ છે કે વેરીએબલ `x` ડિકલેર થયેલું છે અને તેની માટે મેમરી આલોકેટ કરવામાં આવી છે, પરંતુ તેને કોઈ વેલ્યુ અસાઇન કરી નથી.

 Example 2 (not defined):
   console.log(y);

   અહીં, `y` એ ન ડિકલેર કરેલું અને ન કોઈ વેલ્યુ અસાઇન કરવામાં આવી છે. જ્યારે તમે `y`ને લોગ કરવાનો પ્રયાસ કરો છો, ત્યારે "y is not defined" મેસેજ મળશે. આનો અર્થ એ છે કે `y` વેરીએબલ ક્યારેય ડિકલેર ન થયું હોય, એટલે મેમરી આલોકેટ નથી થઈ અને તેનો રેફરન્સ પણ ન મળી શકે.

મુખ્ય તફાવત:
- undefined: વેરીએબલ ડિકલેર થયેલું છે, પરંતુ તેને કોઈ મૂલ્ય અસાઇન નથી કરવામાં આવી.
- not defined: વેરીએબલ ક્યારેય ડિકલેર કરેલું નથી, એટલે તેને રેફરન્સ કરવાની કોશિશ કરવી એ ખોટું છે.



5. What is the use of typeof operator?

Ans:
typeof એ એક યુનરી ઓપરેટર છે, એટલે કે તે સ્ટેટમેન્ટ અથવા એક્સપ્રેશનમાં એક સિંગલ ઓપરન્ડ લે છે. આ ઓપરેટરનો ઉપયોગ તેના ઓપરન્ડનો ડેટા ટાઇપ ચેક કરવા માટે થાય છે, જે પછી સ્ટ્રિંગ સ્વરૂપે રિટર્ન થાય છે. ઉદાહરણ તરીકે, જો આપણે undefind વેરીએબલ ચેક કરીએ તો typeof ઓપરેટર "undefined" તરીકે વેલ્યુ રિટર્ન કરશે.

var x = 10;
console.log(typeof(x));
આ કોડ કન્સોલમાં "number" પ્રિન્ટ કરશે.

var x = 10;
console.log(typeof(x) == 'number');
ઉપરોક્ત કોડથી, જો xનો પ્રકાર "number" હોય, તો આ એક્સપ્રેશન "true" પ્રિન્ટ કરશે.




6. What is the instanceof operator?

Ans: 

`instanceof` ઓપરેટર ચેક કરે છે કે કોઈ ઑબ્જેક્ટ એ કોઈ ક્લાસનું ઇન્સ્ટાન્સ છે કે નહીં.

function Country(name) { this.name = name; } 
var country = new Country("India");
console.log(country instanceof Country); // returns true

આ કોડથી, `country` ઓબ્જેક્ટ `Country` ક્લાસનો ઇન્સ્ટાન્સ છે, એટલે `true` રિટર્ન થશે.

આ ઓપરેટર હેરીટન્સને પણ ધ્યાનમાં રાખે છે.

let arr = ['apple', 'orange', 'grapes'];
console.log(arr instanceof Array); //prints true in console
console.log(arr instanceof Object); //prints true in console

અહીં, `arr` એ એરે છે, પરંતુ તે ઓબ્જેક્ટના પણ એક ભાગ છે, કારણ કે એરે પ્રોટોટાઇપ ઓબ્જેક્ટમાંથી હેરીટ કરતો છે.



7. What is the strict mode?

Ans:
“use strict” એ એક સ્ટેટમેન્ટ નથી, પરંતુ એક લિટરલ એક્સપ્રેશન છે જે ECMAScript સંસ્કરણ 5 દ્વારા સપોર્ટ કરવામાં આવ્યું છે. આ સ્ટેટમેન્ટ બ્રાઉઝરને(strict mode) સક્રિય કરવા માટે કહે છે, જે JavaScript માં વધુ સુરક્ષિત અને ખોટી ભૂલો દૂર કરવા માટે તૈયાર છે. આ સ્ટેટમેન્ટ કેટલીક JavaScript ની સિલેન્ટ ભૂલોને દૂર કરે છે.

Strict mode આખી સ્ક્રિપ્ટ અથવા વ્યક્તિગત ફંક્શન્સ પર લાગુ પડે છે, અને તે બ્લોક સ્ટેટમેન્ટ્સ અથવા કોડ (જે `{}` કળરી બ્રેસ દ્વારા ઢાંકેલ છે) પર લાગુ નથી પડતું. આ કોન્ટેક્સ્ટ્સમાં તે લાગુ પાડવાનો પ્રયાસ કરવો અર્થરહિત છે. eval કોડ, ફંક્શન કોડ, ઈવેંટ હેન્ડલર એટ્રિબ્યુટ્સ, setTimeout() અને સંબંધિત ફંક્શન્સમાં પણ strict mode લાગુ થાય છે, જે તેમને સિન્ટેક્સ અને ખોટી ભૂલો ચકાસવા માટે કાર્ય કરે છે.

ઉદાહરણ:

"use strict";
x = 10; // આ એરર આપશે


ઉપરોક્ત સ્ટેટમેન્ટ એ એરર આપશે કેમ કે strict mode માં વેરીએબલનો ઉપયોગ કરવાનું પહેલા તેને ડિકલેર કરવું જરૂરી છે.

use strict expression gloabl અને લોકલ બંને scope માં લાગુ પડી શકે છે.

Global Scope:

const employee = { name: "Ram", age: 25 };
employee.name = "Raju"; // આ યોગ્ય છે 
"use strict";
x = 10; // આ એરર આપશે

Local Scope:

x = 10; // આ એરર આપશે નહીં 
myFunction();
function myFunction() {
    "use strict";
    y = 15; // આ એરર આપશે
}



8. Explain string in JavaScript.

Ans: 
JavaScript માં કૅરેક્ટર અથવા લખાણ ડેટાનું group એ "string" કહેવાય છે. JavaScript માં કોઈ અલગથી "character" પ્રકાર નથી, એટલે કે એક કૅરેક્ટર પણ string તરીકે સ્ટોર થાય છે. JavaScript માં, string ને સિંગલ કોટ્સ (' ') અથવા ડબલ કોટ્સ (" ") વડે ઘેરવામાં આવે છે.

પરંતુ JavaScript માં, પ્રિમિટિવ વેલ્યુઝ (જેમ કે string) માટે પણ methodઓ અને પ્રોપર્ટીઝ ઉપલબ્ધ છે, કારણ કે JavaScript methodઓ અને પ્રોપર્ટીઝને અમલ કરવા માટે પ્રિમિટિવ વેલ્યુઝને ઑબ્જેક્ટ તરીકે વર્તે છે.

ઉદાહરણ:

var str = 'hello';
console.log(str); // આ "hello" પ્રિન્ટ કરશે.



9. search() અને indexOf() વચ્ચે શું તફાવત છે?

Ans: search() અને indexOf() method વચ્ચે નીચે મુજબના તફાવત છે:

- search(): આ method ઉપયોગ આપેલા મૂલ્યને શોધવા માટે થાય છે અને તે મેળ મળે તે જગ્યા (position) પર પાછું આપે છે. અહીં મૂલ્ય string અથવા regular expression હોઈ શકે છે.
  
- indexOf(): આ method ઉપયોગ આપેલા મૂલ્યને શોધવા માટે થાય છે અને તે મેળ મળે તે જગ્યા પર પાછું આપે છે. અહીં મૂલ્ય string હોવું જોઈએ, અને તે regular expression સ્વીકારતા નથી.

var m = /e/;
var str = "apple";
str.search(m)  // આ 4 આપે છે

var str = "apple";
str.indexOf(m)  // આ -1 આપે છે

સ્પષ્ટતા:
- `search()` regular expression સ્વીકારતું હોય છે, જ્યારે `indexOf()` માત્ર string સ્વીકારે છે. 
- `search()` method regex માટે શોધી શકે છે, પરંતુ `indexOf()` method માત્ર સ્પષ્ટ string માટે કામ કરે છે.



10. indexOf() અને lastIndexOf() વચ્ચે શું તફાવત છે?

Ans: indexOf() અને lastIndexOf() methodઓ વચ્ચે નીચે મુજબના તફાવત છે:

- indexOf(): આ method એ string માં specific text ની પ્રથમ Occurrence (ઘટના) નું ઇન્ડેક્સ આપે છે.
  
- lastIndexOf(): આ method એ string માં specific text ની છેલ્લી Occurrence (ઘટના) નું ઇન્ડેક્સ આપે છે.

var str = 'Hello find me test me';
str.indexOf('me') // આ 11 આપે છે, કારણકે 'me' પ્રથમ વખત 11 પર આવે છે

var str = 'Hello find me test me';
str.lastIndexOf('me') // આ 19 આપે છે, કારણકે 'me' છેલ્લીવાર 19 પર આવે છે

સ્પષ્ટતા:
- `indexOf()` method string માં અનુક્રમણિકા મુજબ પહેલીવાર એ લખાણ શોધી આપે છે.
- `lastIndexOf()` method string માં એ લખાણની છેલ્લીવારની occurrence નું ઇન્ડેક્સ આપે છે.



11. substr() અને substring() વચ્ચે શું તફાવત છે?

Ans: substr() અને substring() પદ્ધતિઓ વચ્ચે નીચે મુજબના તફાવત છે:

- substr(): આ પદ્ધતિ એ string માં specified ઇન્ડેક્સથી શબ્દો શરૂ કરે છે અને આપેલા length મુજબ કેટલા અક્ષરો મેળવવા છે તે આપે છે.

- substring(): આ પદ્ધતિ એ string માં specified ઇન્ડેક્સથી શબ્દો શરૂ કરે છે, પરંતુ length 1 દ્વારા ઘટી જાય છે (અર્થાત, તે આપેલા 2 માનથી 1 ઓછા અક્ષરો આપે છે).

var x = "hello";
console.log((x.substr(1, 4) == "ello")) // આ log માં true પ્રિન્ટ કરશે

var x = "hello";
console.log((x.substring(1, 4) == "ello")) // આ log માં false પ્રિન્ટ કરશે

var x = "hello";
console.log((x.substring(1, 5) == "ello")) // આ log માં true પ્રિન્ટ કરશે

સ્પષ્ટતા:
- `substr()` method, બીજા પરિમાણ તરીકે આપેલા length મુજબ કેટલા અક્ષરો આવશે તે એન્કોડિંગથી નક્કી થાય છે.
- `substring()` method, બીજું પરિમાણ સંખ્યાનું મર્યાદા 1 થી ઘટી જાય છે, એટલે કે આપેલા બંને ઇન્ડેક્સ વચ્ચેના અક્ષરો પાછા આપે છે, 1 ઓછા.



12. Array અને Object વચ્ચે શું તફાવત છે?

Ans: Array અને Object વચ્ચે નીચે મુજબના તફાવત છે:

# Array:- 
Array એ numbered indexes નો ઉપયોગ કરીને એલેમેન્ટને ઍક્સેસ કરે છે.
જ્યારે તમે એલેમેન્ટનું નામ number તરીકે રાખવા માંગો છો ત્યારે array નો ઉપયોગ કરો.
Array ordered collection છે.

# Object:- 
Object એ named indexes નો ઉપયોગ કરીને એલેમેન્ટને નાં members (મેમ્બર)ને ઍક્સેસ કરે છે.
જ્યારે તમે એલેમેન્ટનું નામ string તરીકે રાખવા માંગો છો ત્યારે object નો ઉપયોગ કરો.
Object unordered properties નો કલેક્શન છે.

આવું થશે:

- Array: જ્યાં વ્યક્તિગત વસ્તુઓનો ક્રમ મહત્વપૂર્ણ હોય અને તમે numbered indexes વડે values ઍક્સેસ કરવા માગતા હો, ત્યાં array સૌથી યોગ્ય હોય છે.
  
- Object: જ્યારે તમને values માટે key-value pair structure કે string-based key દ્વારા values રાખવી હોય, ત્યારે object વધુ યોગ્ય છે.



13. Self-executing function શું છે?

Ans: Self-executing function એ એવી ફંક્શન છે જે તેના ડિફાઇન થયા પછી તરત જ એક્ઝિક્યુટ (ચલાવવાં) થાય છે. આનો ફાયદો એ છે કે આ ફંક્શન કોડને ગ્લોબલ ડીક્લેર કર્યા વિના ચલાવશે. આ પ્રકારની ફંક્શન સામાન્ય રીતે DOM એલેમેન્ટ્સ પર event listeners લગાવવા અને અન્ય initialization કાર્ય માટે ઉપયોગમાં લેવાય છે.

આ પ્રકારની self-executing function એ નામ વગરની ફંક્શન હોય છે, જેને anonymous function કહેવામાં આવે છે. આ ફંક્શનની પાછળ parentheses (ગોળાં) હોય છે, જેમાં કોઈ આર્ગ્યુમેન્ટ્સ ના હોય. આ ફંક્શન માટે પેરામિટર્સ parentheses માં પસાર કરી શકાય છે.

નીચે એક સરળ ઉદાહરણ છે જે anonymous function ના ઉપયોગને દર્શાવે છે:
(function () {
    // function body
})();

સ્પષ્ટતા: 
- Self-executing function ને તરત જ execute કરવું એ તેની વિશિષ્ટતા છે. 
- તેમાં parentheses છે જે function call માટે જરૂરિયાત છે, અને તેનું કોઈ નામ નથી, એટલે તે anonymous function કહેવાય છે. 



14. Arrow function શું છે?

Ans: Arrow function એ Javascript માં ES6 (ECMAScript 6) અને તેનાથી ઉપરના વર્ઝન્સમાં આધારિત ફંક્શન છે, જે ફંક્શન એક્સપ્રેશન્સ લખવાની એ સરળ અને ટૂંકી રીત છે.

Arrow function એ એવા ફંક્શન માટે એક ટૂંકું સંકેત છે જેનું પોતાનું "this" નથી. નીચે એક સરળ ઉદાહરણ છે જે આનો ઉપયોગ દર્શાવે છે.

સામાન્ય function:

function add(a, b) {
    return a + b;
}
console.log(add(1, 2)); // 3

Arrow function નો ઉપયોગ:

add = (a, b) => { 
    return a + b; 
}
console.log(add(1, 2)); // 3

સ્પષ્ટતા:
- Arrow functions લખવામાં ટૂંકા અને સરળ છે, અને તેને `=>` સંકેતથી ઓળખી શકાય છે.
- Arrow function ના સ્વરૂપમાં, "this" એ ફંક્શનનો ભાગ નથી, અને તે તેલના સ્કોપ (lexical scope) સાથે જોડાય છે, જે સામાન્ય functions કરતા અલગ હોય છે.



15. વેબ પેજ ચલાવતી બ્રાઉઝર કેવી રીતે શોધવી?  
Ans: તે બ્રાઉઝર શોધવા માટે જે હાલમાં વેબ એપ્લિકેશન ચલાવી રહી છે, `window` ઓબ્જેક્ટનો `navigator` ઉપયોગ કરવામાં આવે છે.  

var browsername = navigator.appName;
console.log(browsername);



16. યૂઝરને નવી પેજ પર કેવી રીતે રીડાયરેક્ટ કરવું?  
ઉત્તર: `window` ઓબ્જેક્ટના `location` નો ઉપયોગ કરી શકીએ છીએ, જેમાં HREF URL લિંક આપીને યૂઝરને નવી પેજ પર રીડાયરેક્ટ કરી શકાય છે.  

window.location.href="https://www.dotnettricks.com/";




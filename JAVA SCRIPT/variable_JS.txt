Variable in JavaScript

1. JavaScript માં વેરીએબલ શું છે?  
Ans: વેરીએબલ એ ડેટા value સ્ટોર કરવા માટેનો કન્ટેનર છે. JavaScript માં, વેરીએબલને `var`, `let`, અથવા `const` નો ઉપયોગ કરીને declare કરી શકાય છે.



2. `var`, `let`, અને `const` વચ્ચે શું ફરક છે? 
Ans:  
- `var`: global-scope, redeclare અને reassign કરી શકાય છે.  
- `let`: block-scope, reassign કરી શકાય છે પરંતુ redeclare નથી કરી શકાય.  
- `const`: block-scope, ન તો reassign કરી શકાય છે અને ન તો redeclare.



3. JavaScriptમાં વેરીએબલ હોઈસ્ટિંગ શું છે?  
Ans: વેરીએબલ હોઈસ્ટિંગ એ JavaScriptનું એવું વર્તન છે જેમાં વેરીએબલની declarations તેમના સ્કોપના title તરફ ખસેડી દેવામાં આવે છે જ્યારે execution થાય છે, પરંતુ તેમની શરૂઆતની મૂલ્ય (initializations) ખસેડી નથી.



4. શું વેરીએબલને value આપ્યા વિના declare કરી શકાય છે?  
Ans: હા, વેરીએબલને value આપ્યા વિના declare કરી શકાય છે, પરંતુ તે `undefined` મૂલ્ય રાખશે ત્યાં સુધી કે તેને કોઇ મૂલ્ય અસાઇન (assign) કરવામાં આવે.  

   ઉદાહરણ:  

   let name;  
   console.log(name); // undefined  
   


5. `undefined` અને `null` વચ્ચે શું ફરક છે?  
Ans: 
- `undefined`: એક વેરીએબલ declare કરવામાં આવી છે પરંતુ તેને value આપ્યું નથી.  
- `null`: એક વેરીએબલને સ્પષ્ટ રીતે "કોઈ મૂલ્ય નથી" એવા મૂલ્ય સાથે assign કરવામાં આવી છે.  

  Example:  

   let name;  
   console.log(name); // undefined

   let person = null; // `person` is explicitly assigned with no value
   console.log(person); // null



6. JavaScript માં global variable શું છે?  
Ans: global variable એ એવી વેરીએબલ છે જે ફંક્શનથી બહાર declare કરવામાં આવે છે અને એના મૂલ્યને કોડના કોઈપણ ભાગથી, ફંક્શનની અંદર પણ, access કરી શકાય છે.



7. JavaScript માં local વેરીએબલ શું છે?  
Ans: લોકલ વેરીએબલ એ એવી વેરીએબલ છે જે ફંક્શનની અંદર declare કરવામાં આવે છે અને તેનો ઉપયોગ ફક્ત તે ફંક્શનની અંદર જ કરી શકાય છે.



8. શું `var`, `let`, અથવા `const` વિના વેરીએબલ declare કરી શકાય છે?  
Ans: હા, જો તમે `var`, `let`, અથવા `const` વિના વેરીએબલને મૂલ્ય અસાઇન કરો, તો તે આપોઆપ Global Variableબની જાય છે, જે unexpected behavior સર્જી શકે છે, આ માટે આ પ્રથા ટાળી જવી જોઈએ.



9. `var` નો ઉપયોગ કરીને declare કરેલી વેરીએબલનો સ્કોપ શું છે?  
Ans: `var` નો ઉપયોગ કરીને declare કરેલી વેરીએબલ function-scoped હોય છે, તેનો અર્થ એ છે કે તે ફંક્શનની અંદર જ ઉપલબ્ધ રહેશે જ્યાં તે ઘોષિત કરવામાં આવી છે.

10. JavaScriptમાં બ્લોક-સ્કોપિંગ શું છે?  
Ans: બ્લોક-સ્કોપિંગ એ એ વખતે થાય છે જ્યારે વેરીએબલ્સ ફક્ત તે બ્લોક (જેમ કે `{}` દ્વારા ઘેરાયેલ)ની અંદર જ ઉપલબ્ધ હોય છે જેમાં તે declare કરવામાં આવી છે. આ `let` અને `const` સાથે થાય છે.



11. `let` નો ઉપયોગ કરીને ઘોષિત કરેલી વેરીએબલને reassign કરી શકાય છે?  
Ans: હા, `let` નો ઉપયોગ કરીને ઘોષિત કરેલી વેરીએબલને reassign કરી શકાય છે, પરંતુ તેને એક જ સ્કોપ (scope)માં redeclared કરી શકાતી નથી.



12. JavaScriptમાં `const` કીવર્ડનો ઉપયોગ શું માટે થાય છે  
Ans: `const` કીવર્ડનો ઉપયોગ એવા વેરીએબલ્સને declare કરવા માટે થાય છે, જેમને શરૂ કરતા મૂલ્ય આપ્યા પછી reassign કરી શકાય નહીં.



13. `const` સાથે ઘોષિત કરેલી વેરીએબલની મૂલ્ય શું હશે જો તેને મૂલ્ય ના અપાયું હોય?  
Ans: `const` સાથે ઘોષિત કરેલી વેરીએબલને declare ના સમયે મૂલ્ય આપવું જરુરી છે. જો તેને મૂલ્ય ન અપાય, તો એ error આપશે.

   Example:

   const x; // Error: Missing initializer in const declaration



14. જો એજ નામ સાથે `var`, `let`, અથવા `const` નો ઉપયોગ કરીને વેરીએબલ ઘોષિત કરવામાં આવે તો શું થાય છે?
Ans:  
- `var` એજ સ્કોપમાં ફરીથી redeclaration કરવાની પરવાનગી આપે છે.  
- `let` અને `const` એજ સ્કોપમાં ફરીથી declare કરવાની પરવાનગી નથી આપતા અને એ error આપશે.



15. જૂનો વેરીએબલ જેનું initialization નથી કરવામાં આવ્યો, તેનું ડિફૉલ્ટ મૂલ્ય શું છે?  
Ans: જુના વેરીએબલનું ડિફૉલ્ટ મૂલ્ય `undefined` છે.



16. assign કરતાં સમયે પ્રીમિટીવ અને રેફરન્સ પ્રકારોમાં શું ફરક છે?  
Ans:
- પ્રીમિટીવ પ્રકાર (જેમ કે `string`, `number`, `boolean`) મૂલ્ય દ્વારા અસાઇન થાય છે.  
- રેફરન્સ પ્રકાર (જેમ કે ઓબ્જેક્ટ્સ, એરે, ફંક્શન) રેફરન્સ દ્વારા અસાઇન થાય છે.



17. સ્કોપના દ્રષ્ટિકોણથી global અને local વેરીએબલ્સમાં શું ફરક છે?  
Ans:  
- global વેરીએબલ્સ કોઈપણ સ્થાનથી કોડમાં ઍક્સેસ કરી શકાય છે.  
- local વેરીએબલ્સ ફક્ત ફંક્શન અથવા બ્લૉકની અંદર જ ઍક્સેસ કરી શકાય છે જ્યાં તેઓ ડીક્લેર કરવામાં આવ્યા છે.



18. JavaScript undeclare કરેલા વેરીએબલ્સને કેવી રીતે સંભાળે છે?  
Ans:  
જો કોઈ વેરીએબલનો ઉપયોગ declare કર્યા વિના કરવામાં આવે, તો JavaScript તેને આપોઆપ global વેરીએબલ બનાવે છે (નોન-સ્ટ્રિક મોડમાં). સ્ટ્રિક્ટ મોડમાં, આ `ReferenceError` ઉદભવે છે.



19. `let` અને `var` વચ્ચે હોિસ્ટિંગના સંદર્ભમાં શું difference છે? 
Ans:  
- `var`: declaration ટોચ પર hoisted થાય છે, અને વેલ્યૂ `undefined` રહી છે જ્યારે સુધી કે એસાઇન કરવામાં નથી આવી.  
- `let`: declaration hoisted થાય છે, પરંતુ Initial સંકેત આપવામાં નથી આવતો, જેને કારણે "ટેમ્પોરલ ડેડ ઝોન" સર્જાય છે, જ્યાં વેરીએબલને Initial કરવા પહેલાં ઍક્સેસ કરવામાં `ReferenceError` મળે છે. 



20. `window` ઑબ્જેક્ટ અને ગ્લોબલ વેરીએબલ્સ વચ્ચે શું સંબંધ છે?  
Ans:  
બ્રાઉઝર environment માં, ગ્લોબલ વેરીએબલ્સ `window` ઑબ્જેક્ટના પ્રોપર્ટી હોય છે, એટલે કે તમે તેમને `window.variableName` દ્વારા ઍક્સેસ કરી શકો છો.



21. JavaScriptમાં કૉન્સ્ટન્ટ વેરીએબલ શું છે?  
Ans:
કૉન્સ્ટન્ટ વેરીએબલ એ એવો વેરીએબલ છે જે `const` કીવર્ડનો ઉપયોગ કરીને ડિકલેર કરવામાં આવે છે, અને તેને તેના પ્રથમ આઈનિશિયલ અસાઈનમેન્ટ પછી ફરીથી અસાઈન કરી શકાતું નથી.



22. `const` સાથે ડિકલેર કરેલા ઓબ્જેક્ટની પ્રોપર્ટી મોડિફાય કરી શકાય છે શું? 
Ans:  
હાં, `const` સાથે ડિકલેર કરેલા ઓબ્જેક્ટની પ્રોપર્ટી મોડિફાય કરી શકાય છે, પરંતુ ઓબ્જેક્ટનું રેફરન્સ ફરીથી અસાઈન કરી શકાતું નથી.



23. undeclare કરેલ વેરીએબલને value આપતી વખતે result શું થાય છે?  
Ans:  
નોન-સ્ટ્રિક્ટ મોડમાં, JavaScript આપોઆપ Global Variable બનાવે છે. સ્ટ્રિક્ટ મોડમાં, આ એક `ReferenceError` પરિણામ આપે છે.



24. `var` અને `let` વચ્ચે સ્કોપની દૃષ્ટિએ શું difference છે?  
Ans: 
- `var: ફંક્શન-સ્કોપડ છે.  
- `let`: બ્લોક-સ્કોપડ છે, જે તેનો પ્રાપ્યતા માત્ર તે બ્લોક સુધી મર્યાદિત કરે છે જ્યાં તેને ડેક્લેર કરેલ છે.



25. JavaScript માં Variable શેડોઇંગ શું છે?  
Ans:
Variable શેડોઇંગ ત્યારે થાય છે જ્યારે કોઈ ચોક્કસ સ્કોપમાં ડેક્લેર કરેલી Variable નો નામ બહારના સ્કોપમાં ડેક્લેર કરેલા Variable સાથે સમાન હોય, જે બહારના Variable ને "શેડો" કરે છે.



26. JavaScript માં `const` ઓબ્જેક્ટ શું છે?  
Ans:
`const` ઓબ્જેક્ટ એ ઓબ્જેક્ટ છે જેને બીજું રેફરન્સ આવકમાં ફરીથી એસાઇન નથી કરી શકાતું, પરંતુ તેના પ્રોપર્ટીઝને એડિટ કરી શકાય છે.



27. શું `const` સાથે જાહેર કરેલું ઓબ્જેક્ટ બદલી શકાય છે?  
Ans:
હા, `const` સાથે જાહેર કરેલા ઓબ્જેક્ટના પ્રોપર્ટીઝને બદલી શકાય છે, પરંતુ ઓબ્જેક્ટને નવા ઓબ્જેક્ટ સાથે ફરીથી અસાઇન કરી શકતા નથી.



28. JavaScript માં variable lifetime શું છે?  
Ans:  
variable નો lifetime તેના સ્કોપ પર આધારિત છે. local variable ફક્ત ફંક્શનની enforcement દરમ્યાન જ અસ્તિત્વમાં રહે છે, જ્યારે global variable એપ્લિકેશનના lifetime દરમિયાન સતત અસ્તિત્વમાં રહે છે.



29. JavaScript માં કૉન્સ્ટ એરે કેવી રીતે declare કરવી?  
Ans:  
તમે એરેને `const` તરીકે declare કરી શકો છો, જે એરેના સંદર્ભને Rescheduled કરવાથી રોકે છે, પરંતુ એરેની અંદરનું સામગ્રી હજુ પણ બદલી શકાય છે.

   Example:
 
   const arr = [1, 2, 3];
   arr.push(4); // Allowed
   arr = [5, 6]; // Error: Assignment to constant variable



30. JavaScript માં વેરિએબલ નામકરણ માટે best practice શું છે?  
Ans:  
best practice માં આ સામેલ છે:  
- Descriptive નામોનો ઉપયોગ કરો (જેમ કે, `userAge` ના બદલે `x`).  
- બિનહિતાદિક શબ્દવાળાં વેરિએબલ માટે camelCase નો ઉપયોગ કરો.  
- reserve keyword ઉપયોગ કરવાથી બચો (જેમ કે, `class`, `var`, `let`).  


### **1. React માં form input કેવી રીતે સંભાળવું?**

**જવાબ**:  
React માં, તમે **controlled components** નો ઉપયોગ કરીને form input ને સંભાળી શકો છો, જ્યાં input ની value React state દ્વારા નિયંત્રિત થાય છે. તમે `value` prop નો ઉપયોગ કરીને input field ને state સાથે બાઈન્ડ કરો છો અને `onChange` event handler નો ઉપયોગ કરીને state ને અપડેટ કરો છો.

ઉદાહરણ:

```jsx
import { useState } from 'react';

function MyForm() {
  const [inputValue, setInputValue] = useState('');

  const handleChange = (event) => {
    setInputValue(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log(inputValue);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={inputValue}
        onChange={handleChange}
      />
      <button type="submit">Submit</button>
    </form>
  );
}
```

---

### **2. React માં controlled components શું છે?**

**જવાબ**:  
**Controlled component** એ તે input element છે જેની value component ની state દ્વારા નિયંત્રિત થાય છે. Input field ની value component ની state માં સંગ્રહાય છે અને input field માં થયેલ દરેક ફેરફાર `onChange` event દ્વારા સંભાળવામાં આવે છે, જે state ને અપડેટ કરે છે.

ઉદાહરણ:

```jsx
function MyForm() {
  const [value, setValue] = useState('');

  const handleChange = (event) => {
    setValue(event.target.value);
  };

  return (
    <input
      type="text"
      value={value}
      onChange={handleChange}
    />
  );
}
```

---

### **3. React માં uncontrolled components શું છે?**

**જવાબ**:  
**Uncontrolled component** એ તે input element છે જ્યાં value DOM દ્વારા સંભાળી લેવામાં આવે છે, React state દ્વારા નહીં. તેના value ને મેનેજ કરવા માટે, તમે **ref** નો ઉપયોગ કરીને DOM element ને સીધો access કરી શકો છો.

ઉદાહરણ:

```jsx
function MyForm() {
  const inputRef = useRef();

  const handleSubmit = (event) => {
    event.preventDefault();
    alert('Input value: ' + inputRef.current.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input ref={inputRef} type="text" />
      <button type="submit">Submit</button>
    </form>
  );
}
```

---

### **4. React માં form submission કેવી રીતે સંભાળવું?**

**જવાબ**:  
React માં form submission `onSubmit` event handler નો ઉપયોગ કરીને સંભાળવામાં આવે છે. તમે `event.preventDefault()` નો ઉપયોગ કરીને form ની default submission behavior ને રોકી શકો છો અને પછી જરૂરી ડેટા સાથે કામ કરી શકો છો.

ઉદાહરણ:

```jsx
function MyForm() {
  const [name, setName] = useState('');

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log('Form submitted with name:', name);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <button type="submit">Submit</button>
    </form>
  );
}
```

---

### **5. React માં form data કેવી રીતે validate કરવું?**

**જવાબ**:  
Form data validation `onSubmit` handler અંદર કરવામાં આવી શકે છે, જ્યાં તમે input values ચકાસી શકો છો અને submission પહેલાં તેને માન્ય બનાવો છો. વધુ જટિલ validation માટે, તમે **Formik** અથવા **React Hook Form** જેવી લાઇબ્રેરીઝનો ઉપયોગ કરી શકો છો.

ઉદાહરણ (સરળ validation):

```jsx
function MyForm() {
  const [email, setEmail] = useState('');
  const [error, setError] = useState('');

  const handleSubmit = (event) => {
    event.preventDefault();
    if (!email.includes('@')) {
      setError('કૃપા કરીને માન્ય ઇમેઇલ દાખલ કરો');
    } else {
      setError('');
      console.log('ફોર્મ સબમિટ કર્યું');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      {error && <span>{error}</span>}
      <button type="submit">Submit</button>
    </form>
  );
}
```


### **6. `useState` હૂકનો ફોર્મ્સમાં શું હેતુ છે?**

**જવાબ**:  
`useState` હૂકનો ઉપયોગ controlled components માં form inputs ની state ને મેનેજ કરવા માટે થાય છે. આ હૂક તમને input values પર નજર રાખવાની અને user દ્વારા input બદલતી વખતે state ને અપડેટ કરવાની સગવડ આપે છે.

ઉદાહરણ:

```jsx
function MyForm() {
  const [name, setName] = useState('');

  const handleChange = (event) => {
    setName(event.target.value);
  };

  return (
    <form>
      <input
        type="text"
        value={name}
        onChange={handleChange}
      />
    </form>
  );
}
```

---

### **7. React ફોર્મ્સમાં `onChange` event શું છે?**

**જવાબ**:  
`onChange` event handler દરેક વખતે ટ્રિગર થાય છે જ્યારે input value બદલાય છે. controlled components માં, user જ્યારે form field માં ટાઈપ કરે છે ત્યારે આ event component ની state ને અપડેટ કરવા માટે ઉપયોગી છે.

ઉદાહરણ:

```jsx
function MyForm() {
  const [email, setEmail] = useState('');

  const handleChange = (event) => {
    setEmail(event.target.value);
  };

  return (
    <input
      type="email"
      value={email}
      onChange={handleChange}
    />
  );
}
```

---

### **8. React માં multiple inputs કેવી રીતે સંભાળી શકાય છે?**

**જવાબ**:  
તમે multiple inputs ને single state object નો ઉપયોગ કરીને handle કરી શકો છો, જેમાં બધા form values હોય. `onChange` handler પછીથી state object ના સંબંધિત ભાગને અપડેટ કરે છે.

ઉદાહરણ:

```jsx
function MyForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
  });

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevState) => ({
      ...prevState,
      [name]: value,
    }));
  };

  return (
    <form>
      <input
        type="text"
        name="name"
        value={formData.name}
        onChange={handleChange}
      />
      <input
        type="email"
        name="email"
        value={formData.email}
        onChange={handleChange}
      />
    </form>
  );
}
```

---

### **9. React માં `useRef` હૂક શું છે, અને ફોર્મ્સમાં કેવી રીતે ઉપયોગ થાય છે?**

**જવાબ**:  
`useRef` હૂકનો ઉપયોગ DOM elements ને સીધું reference કરવા માટે થાય છે, જે uncontrolled components માં ઉપયોગી છે. આ હૂક તમને input field નું value એ state માં રાખ્યા વગર access કરવાની સગવડ આપે છે.

ઉદાહરણ:

```jsx
function MyForm() {
  const inputRef = useRef();

  const handleSubmit = (event) => {
    event.preventDefault();
    alert(`Input value: ${inputRef.current.value}`);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input ref={inputRef} type="text" />
      <button type="submit">Submit</button>
    </form>
  );
}
```

---

### **10. React માં ફોર્મ કેવી રીતે રીસેટ કરશો?**

**જવાબ**:  
તમે controlled components માં input fields સાથે જોડાયેલા state values ને ક્લિયર કરીને ફોર્મ રીસેટ કરી શકો છો, અથવા uncontrolled components માં form element પર `.reset()` મેડથડ નો ઉપયોગ કરી શકો છો.

ઉદાહરણ (controlled component):

```jsx
function MyForm() {
  const [inputValue, setInputValue] = useState('');

  const handleReset = () => {
    setInputValue('');
  };

  return (
    <form>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <button type="button" onClick={handleReset}>
        Reset
      </button>
    </form>
  );
}
```

ઉદાહરણ (uncontrolled component):

```jsx
function MyForm() {
  const inputRef = useRef();

  const handleReset = () => {
    inputRef.current.value = '';
  };

  return (
    <form>
      <input ref={inputRef} type="text" />
      <button type="button" onClick={handleReset}>
        Reset
      </button>
    </form>
  );
}
```


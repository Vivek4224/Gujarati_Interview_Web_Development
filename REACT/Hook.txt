### **1. React Hooks શું છે?**
React Hooks એ એવી functions છે જે તમને function components માં React state અને lifecycle features સાથે "hook in" થવાનો મોકો આપે છે. આ hooks React 16.8 માં રજૂ કરવામાં આવ્યા હતા જે functional components માં state અને side effects સાથે કામ કરવું સરળ બનાવે છે, અને class components ની જરૂરિયાત દૂર કરે છે.

---

### **2. `useState` hook શું છે?**
`useState` એ એક hook છે જે તમને functional components માં state ઉમેરવાની સગવડ આપે છે. આ hook એ બે એલિમેન્ટ ધરાવતી array આપે છે: વર્તમાન state value અને તેને અપડેટ કરવાની function.

```javascript
import React, { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>{count}</p>
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```

---

### **3. `useEffect` hook શું છે?**
`useEffect` એ એક hook છે જે function components માં side effects જેવી કે data fetching, subscriptions, અથવા DOM ને મેન્યુઅલી બદલવાનું કામ કરે છે. આ hook class components ના lifecycle methods (જેમ કે `componentDidMount`, `componentDidUpdate`, `componentWillUnmount`) ના સમાન છે.

```javascript
import React, { useState, useEffect } from "react";

function FetchData() {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetch("https://api.example.com/data")
      .then((response) => response.json())
      .then((data) => setData(data));
  }, []); // ખાલી dependency array એ જ અર્થ આપે છે કે આ એક જ વાર ચાલે છે, જેમ કે componentDidMount

  return <div>{data ? JSON.stringify(data) : "Loading..."}</div>;
}
```

---

### **4. `useContext` hook શું છે?**
`useContext` એ એક hook છે જે તમને function component માં context ની value પ્રાપ્ત કરવા માટે સગવડ આપે છે. આ hook React context માંથી values consume કરવા માટે ઉપયોગમાં લેવામાં આવે છે.

```javascript
import React, { useContext } from "react";

const ThemeContext = React.createContext("light");

function ThemedComponent() {
  const theme = useContext(ThemeContext);
  return <div>The current theme is {theme}</div>;
}
```

---

### **5. `useReducer` hook શું છે?**
`useReducer` એ એક hook છે જે React માં વધુ જટિલ state logic માટે ઉપયોગી છે, જે `useState` જેવા છે પરંતુ state transitions ને actions અને reducers દ્વારા મેનેજ કરવા માટે વધુ યોગ્ય છે.

```javascript
import React, { useReducer } from "react";

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case "increment":
      return { count: state.count + 1 };
    case "decrement":
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>{state.count}</p>
      <button onClick={() => dispatch({ type: "increment" })}>Increment</button>
      <button onClick={() => dispatch({ type: "decrement" })}>Decrement</button>
    </div>
  );
}
```


### **6. `useRef` hook શું છે?**
`useRef` એ એક hook છે જે તમને renders વચ્ચે values ને persist કરવા દે છે, વિના re-render થવાની જરૂરિયાત રાખે. આ DOM elements ને reference કરવા માટે પણ ઉપયોગી છે.

```javascript
import React, { useRef } from "react";

function FocusInput() {
  const inputRef = useRef(null);

  const focusInput = () => {
    inputRef.current.focus();
  };

  return (
    <div>
      <input ref={inputRef} />
      <button onClick={focusInput}>Focus Input</button>
    </div>
  );
}
```

---

### **7. `useMemo` hook શું છે?**
`useMemo` એ એક hook છે જે computation ના પરિણામને memoize કરે છે અને માત્ર ત્યારે ફરીથી ગણતરી કરે છે જ્યારે તેની dependencies માંથી કોઈ એક બદલાય છે. આ expensive calculations ને optimize કરવા માટે ઉપયોગી છે.

```javascript
import React, { useState, useMemo } from "react";

function ExpensiveCalculation({ number }) {
  const expensiveResult = useMemo(() => {
    return number * 1000;
  }, [number]); // માત્ર `number` બદલાય ત્યારે પુન:ગણતરી થશે

  return <div>Result: {expensiveResult}</div>;
}
```

---

### **8. `useCallback` hook શું છે?**
`useCallback` એ એક hook છે જે callback function નો memoized version આપે છે. જ્યારે functions ને child components માં props તરીકે pass કરવામાં આવે છે, ત્યારે unnecessary re-renders ટાળવા માટે આ hook ઉપયોગી છે.

```javascript
import React, { useState, useCallback } from "react";

function Child({ onClick }) {
  return <button onClick={onClick}>Click Me</button>;
}

function Parent() {
  const [count, setCount] = useState(0);

  const memoizedCallback = useCallback(() => {
    console.log("Button clicked");
  }, []); // Dependencies બદલાય ત્યાં સુધી નહીં બદલાય

  return (
    <div>
      <p>{count}</p>
      <Child onClick={memoizedCallback} />
      <button onClick={() => setCount(count + 1)}>Increment</button>
    </div>
  );
}
```

---

### **9. `useLayoutEffect` hook શું છે?**
`useLayoutEffect` એ `useEffect` જેવી છે, પરંતુ આ DOM mutations પછી સવિશેષ રૂપે synchronous રીતે ચલાવવામાં આવે છે. આ hook ત્યારે ઉપયોગી છે જ્યારે તમે DOM elements ને measure કરવાની જરૂર હોય અથવા એવી કોઈ કામગીરી કરવા જે દ્રષ્ટિમાં ફેરફાર કરી શકે.

```javascript
import React, { useLayoutEffect, useRef } from "react";

function ResizeComponent() {
  const divRef = useRef(null);

  useLayoutEffect(() => {
    const divWidth = divRef.current.getBoundingClientRect().width;
    console.log("Width of div:", divWidth);
  }, []);

  return <div ref={divRef}>Hello</div>;
}
```

---

### **10. `useImperativeHandle` hook શું છે?**
`useImperativeHandle` એ `forwardRef` સાથે ઉપયોગમાં લેવાય છે જેથી parent components માટે exposed instance value ને કસ્ટમાઈઝ કરી શકાય જ્યારે refs નો ઉપયોગ થાય છે. આ hook ત્યારે ઉપયોગી છે જ્યારે તમે parent component માટે ચોક્કસ methods અથવા properties expose કરવી હોય.

```javascript
import React, { useImperativeHandle, useRef, forwardRef } from "react";

const Child = forwardRef((props, ref) => {
  const localRef = useRef();

  useImperativeHandle(ref, () => ({
    focus: () => {
      localRef.current.focus();
    }
  }));

  return <input ref={localRef} />;
});

function Parent() {
  const childRef = useRef();

  return (
    <div>
      <Child ref={childRef} />
      <button onClick={() => childRef.current.focus()}>Focus Input</button>
    </div>
  );
}
```

---

### **11. React Hooks નો ઉપયોગ કરવાના નિયમો શું છે?**
- Hooks ને તમારી component ની top level પર જ call કરવું જોઈએ (loops, conditions, અથવા nested functions માં નહીં).
- Hooks ને React function components અથવા custom hooks માં જ call કરવું જોઈએ.
- Regular JavaScript functions માં hooks ને call ન કરો.


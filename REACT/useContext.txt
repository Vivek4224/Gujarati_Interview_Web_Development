1. What is `useContext` in React?

Answer:  
`useContext` એ React માં એક હૂક છે જે તમને ફંક્શનલ કોમ્પોનન્ટમાં સીધા કૉન્સટેક્સ્ટની મૂલ્યને એક્સેસ કરવાની મંજૂરી આપે છે. આનો ઉપયોગ કરીને, તમે કમ્પોનન્ટ ટ્રીમાંથી પ્રોપ્સને દરેક સ્તરે મેન્યુઅલી પસાર કર્યા વિના ડેટા પાસ કરી શકો છો.

ઉદાહરણ:


const MyContext = React.createContext();

function MyComponent() {
  const value = useContext(MyContext);
  return <div>{value}</div>;
}




2. How do you create a context in React?

Answer:  
તમે `React.createContext()` નો ઉપયોગ કરીને કૉન્સટેક્સ્ટ બનાવી શકો છો. આ ફંક્શન એક ઓબ્જેક્ટ આપે છે જેમાં `Provider` અને `Consumer` કમ્પોનન્ટ્સ સમાવિષ્ટ હોય છે. `Provider` કમ્પોનન્ટ કૉન્સટેક્સ્ટ મૂલ્યને કમ્પોનન્ટ ટ્રીમાં પસાર કરવા માટે ઉપયોગ થાય છે, જ્યારે `useContext` અથવા `Consumer` તેનો એક્સેસ કરવા માટે ઉપયોગ થાય છે.

ઉદાહરણ:


const MyContext = React.createContext('default value');



3. How do you provide a context value in React?

Answer:  
કૉન્સટેક્સ્ટ મૂલ્ય પ્રદાન કરવા માટે, તમે કૉન્સટેક્સ્ટ સાથે આપેલા `Provider` કમ્પોનન્ટનો ઉપયોગ કરો છો. `Provider` ના `value` પ્રોપનો ઉપયોગ મૂલ્યને કૉન્સટેક્સ્ટની પૃથ્વી પર તમામ કમ્પોનન્ટ્સને પહોંચાડવા માટે થાય છે.

ઉદાહરણ:


const MyContext = React.createContext();

function App() {
  return (
    <MyContext.Provider value="Hello, World!">
      <MyComponent />
    </MyContext.Provider>
  );
}



4. How do you consume a context value in a component?

Answer:  
તમે ફંક્શનલ કોમ્પોનન્ટમાં `useContext` હૂકનો ઉપયોગ કરીને કૉન્સટેક્સ્ટ મૂલ્યનો ઉપભોગ કરી શકો છો. આ હૂક કૉન્સટેક્સ્ટ ઓબ્જેક્ટને આર્ગ્યુમેન્ટ તરીકે લે છે અને વર્તમાન કૉન્સટેક્સ્ટ મૂલ્ય આપે છે.

ઉદાહરણ:


const MyContext = React.createContext();

function MyComponent() {
  const value = useContext(MyContext);
  return <div>{value}</div>;
}



5. Can you use `useContext` in class components?

Answer:  
ના, `useContext` એ હૂક છે અને ફક્ત ફંક્શનલ કોમ્પોનન્ટ્સમાં જ ઉપયોગ કરી શકાય છે. ક્લાસ કોમ્પોનન્ટ્સમાં, તમે `static contextType` અથવા `Context.Consumer` નો ઉપયોગ કરીને કૉન્સટેક્સ્ટ એક્સેસ કરી શકો છો.

ક્લાસ કોમ્પોનન્ટ્સ સાથે `contextType` નો ઉદાહરણ:


const MyContext = React.createContext();

class MyComponent extends React.Component {
  static contextType = MyContext;

  render() {
    return <div>{this.context}</div>;
  }
}


6. How does `useContext` differ from `Context.Consumer`?

Answer:  
- `useContext` એ એક હૂક છે જે ફક્ત ફંક્શનલ કોમ્પોનન્ટ્સમાં કામ કરે છે અને નમૂનાની મૂલ્યને સીધો પ્રદાન કરે છે.
- `Context.Consumer` એ એક કમ્પોનન્ટ છે જે રેન્ડર પ્રોપ પેટર્નનો ઉપયોગ કરે છે અને તે ફંક્શનલ અને ક્લાસ કોમ્પોનન્ટ્સ બંનેમાં ઉપયોગ કરી શકાય છે.

`Context.Consumer` નો ઉદાહરણ:


const MyContext = React.createContext('Hello');

function MyComponent() {
  return (
    <MyContext.Consumer>
      {value => <div>{value}</div>}
    </MyContext.Consumer>
  );
}




7. How do you update the context value?

Answer:  
કૉન્સટેક્સ્ટ મૂલ્યને અપડેટ કરવા માટે, તમે `Provider` કમ્પોનન્ટમાં સ્ટેટનો ઉપયોગ કરી શકો છો. જયારે સ્ટેટ બદલાય છે, ત્યારે કૉન્સટેક્સ્ટ મૂલ્ય આપોઆપ અપડેટ થાય છે અને બધા કૉન્સ્યુમર્સ માટે રી-રેન્ડર ટ્રિગર કરે છે.

ઉદાહરણ:


const MyContext = React.createContext();

function App() {
  const [value, setValue] = useState('Hello');

  return (
    <MyContext.Provider value={value}>
      <button onClick={() => setValue('World')}>Change Value</button>
      <MyComponent />
    </MyContext.Provider>
  );
}

function MyComponent() {
  const value = useContext(MyContext);
  return <div>{value}</div>;
}


8. Can you pass multiple values through a context?

Answer:  
હા, તમે કૉન્સટેક્સ્ટ દ્વારા અનેક મૂલ્યોને પાસ કરી શકો છો, એક ઓબ્જેક્ટ અથવા એરેનો ઉપયોગ કરીને. કૉન્સ્યુમર્સ સમગ્ર ઓબ્જેક્ટ અથવા એરેને પ્રાપ્ત કરશે અને તેઓ જરૂરી મૂલ્યોને ડીસ્ટ્રક્ચર કરી શકે છે.

ઉદાહરણ:


const MyContext = React.createContext();

function App() {
  const contextValue = { user: 'John', role: 'Admin' };

  return (
    <MyContext.Provider value={contextValue}>
      <MyComponent />
    </MyContext.Provider>
  );
}

function MyComponent() {
  const { user, role } = useContext(MyContext);
  return <div>{`User: ${user}, Role: ${role}`}</div>;
}


 9. When should you use `useContext` in React?

Answer:  
તમે `useContext` નો ઉપયોગ ત્યારે કરવો જોઈએ જ્યારે તમને ઘણા સ્તરોના કમ્પોનન્ટ્સ દ્વારા ડેટા પસાર કરવાની જરૂર હોય, અને પ્રોપ્સને કૉમ્પોનન્ટ ટ્રીમાંExplicitલી પસાર કરવાની જરૂર ન હોય. આ ખાસ કરીને ગ્લોબલ સ્ટેટ, થીમિંગ, અથવા યુઝર ઓથન્ટિકેશન કૉન્સટેક્સ્ટ માટે ઉપયોગી છે.

ઉદાહરણ:
- યુઝર ઓથન્ટિકેશન સ્ટેટ
- થીમ (લાઇટ અથવા ડાર્ક મોડ)
- ભાષા/સ્થાન સેટિંગ્સ




10. What are the performance considerations when using `useContext`?

Answer:  
જ્યારે તમે કૉન્સટેક્સ્ટ મૂલ્યને અપડેટ કરો છો, ત્યારે બધા કૉન્સ્યુમર્સ જે તે કૉન્સટેક્સ્ટનો ઉપયોગ કરે છે, તે ફરીથી રી-રેન્ડર થાય છે, ભલે જ કૉન્સટેક્સ્ટના એક નાનો ભાગ બદલાયો હોય. પરફોર્મન્સ ઓપ્ટિમાઇઝ કરવા માટે, તમે આને કરી શકો છો:
- કૉન્સટેક્સ્ટને વિભાજિત કરો: વિવિધ રાજ્ય માટે અલગ-અલગ કૉન્સટેક્સ્ટનો ઉપયોગ કરો, જેથી અનાવશ્યક રી-રેન્ડરોથી બચી શકાય.
- કૉન્સટેક્સ્ટ મૂલ્યોને મેમોઇઝ કરો: જો કૉન્સટેક્સ્ટ મૂલ્ય ગણના અથવા અન્ય મૂલ્યોમાંથી પ્રાપ્ત થાય છે, તો `useMemo` નો ઉપયોગ કરીને તેને મેમોઇઝ કરો.

`useMemo` સાથે ઉદાહરણ:


const MyContext = React.createContext();

function App() {
  const [count, setCount] = useState(0);
  const contextValue = useMemo(() => ({ count }), [count]);

  return (
    <MyContext.Provider value={contextValue}>
      <MyComponent />
    </MyContext.Provider>
  );
}




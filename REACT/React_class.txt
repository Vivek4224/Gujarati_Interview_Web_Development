1. What is a class component in React?

ઉત્તર:  
ક્લાસ કોમ્પોનન્ટ એ એક જાવાસ્ક્રિપ્ટ ક્લાસ છે જે `React.Component` ને એક્સટેન્ડ કરે છે અને `render()` જેવા મિથોડ્સને સમાવેશ કરે છે જે JSX પરત આપે છે, જે કોમ્પોનન્ટના UI માટે હોય છે. ક્લાસ કોમ્પોનન્ટ્સ પાસે સ્ટેટ અને લાઈફસાયકલ મિથોડ્સ હોઈ છે, જે તેમને હૂક્સના પરિચય પહેલાં ફંક્શનલ કોમ્પોનન્ટ્સ કરતાં વધુ શક્તિશાળી બનાવે છે.

class MyComponent extends React.Component {
  render() {
    return <h1>Hello, World!</h1>;
  }
}



2. How do you define state in a class component?

ઉત્તર:  
ક્લાસ કોમ્પોનન્ટમાં, સ્ટેટને `constructor` મિથોડનો ઉપયોગ કરીને વ્યાખ્યાયિત કરવામાં આવે છે અને સ્ટેટને `this.state` દ્વારા સેટ કરવામાં આવે છે. તમે સ્ટેટને અપડેટ કરવા માટે `this.setState()`નો ઉપયોગ કરી શકો છો.


class MyComponent extends React.Component {
  constructor() {
    super();
    this.state = {
      count: 0
    };
  }

  render() {
    return <h1>{this.state.count}</h1>;
  }
}



3. What is the purpose of `this.setState()` in class components?

ઉત્તર:  
`this.setState()` એ ક્લાસ કોમ્પોનન્ટમાં સ્ટેટને અપડેટ કરવા માટે ઉપયોગ થાય છે. તે કોમ્પોનન્ટના રેન્ડરને ટ્રિગર કરે છે અને UI ને તે પ્રમાણે અપડેટ કરે છે. `setState()` એ અસિંક્રોનસ હોય છે, એટલે કે React કાર્યક્ષમતાના અનુકૂળતા માટે સ્ટેટ અપડેટને બેચ કરે છે.


this.setState({ count: this.state.count + 1 });




4. What are lifecycle methods in class components?

ઉત્તર:  
લાઈફસાયકલ મિથોડ્સ એ ખાસ મિથોડ્સ છે જે ક્લાસ કોમ્પોનન્ટ્સમાં નક્કી કરેલા સમયગાળા પર કોલ થાય છે (જેમ કે, જ્યારે તે બનાવાયું, અપડેટ થયું, અથવા નષ્ટ થયું). કેટલાક સામાન્ય લાઈફસાયકલ મિથોડ્સ છે:
- `componentDidMount()`: આ મિથોડ કોમ્પોનન્ટ માઉન્ટ થવા પછી એકવાર કોલ થાય છે.
- `componentDidUpdate()`: આ મિથોડ કોમ્પોનન્ટ અપડેટ થવા પછી કોલ થાય છે.
- `componentWillUnmount()`: આ મિથોડ કોમ્પોનન્ટ માઉન્ટ થયાને પહેલાં કોલ થાય છે અને તે નષ્ટ થાય છે.


class MyComponent extends React.Component {
  componentDidMount() {
    console.log("Component mounted");
  }

  render() {
    return <h1>Hello, World!</h1>;
  }
}



5. What is the difference between `componentDidMount()` and `componentWillUnmount()`?

ઉત્તર:  
- `componentDidMount()` એ એકવાર કોલ થાય છે, તરત જ કોમ્પોનન્ટ માઉન્ટ થવા (DOMમાં સમાવિષ્ટ થવા) પછી. આ ડેટા ફેચિંગ અથવા સબ્સ્ક્રિપ્શન સેટઅપ માટે સામાન્ય રીતે ઉપયોગી છે.
- `componentWillUnmount()` એ કોલ થાય છે તરત કોમ્પોનન્ટ માઉન્ટ થયાને પહેલાં અને DOMમાંથી દૂર થવા. આ ક્લીનઅપ ટાસ્ક માટે ઉપયોગી છે, જેમ કે નેટવર્ક રિક્વેસ્ટ રદ કરવી અથવા ઇવેન્ટ લિસ્ટનર્સ દૂર કરવી.



6. How do you pass props to a class component?

ઉત્તર:  
ક્લાસ કોમ્પોનન્ટ્સમાં પ્રોપ્સને ફંક્શનલ કોમ્પોનન્ટ્સની જેમ જ પસાર કરવામાં આવે છે, પરંતુ તેમને `this.props` દ્વારા ઍક્સેસ કરવામાં આવે છે. તમે ક્લાસ કોમ્પોનન્ટમાં `props`ને બદલતા નથી.


class MyComponent extends React.Component {
  render() {
    return <h1>{this.props.message}</h1>;
  }
}

// ઉપયોગ
<MyComponent message="Hello, World!" />



7. How do you handle events in class components?

ઉત્તર:  
ક્લાસ કોમ્પોનન્ટ્સમાં, તમે ઈવેન્ટ્સને પરિભાષિત કરતા `this` સાથે મીથોડને બાઇન્ડ કરી તેના કૉનટેક્સટને સાચી રીતે નક્કી કરો છો.

class MyComponent extends React.Component {
  constructor() {
    super();
    this.state = { count: 0 };
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState({ count: this.state.count + 1 });
  }

  render() {
    return <button onClick={this.handleClick}>Click Me</button>;
  }
}


વૈકલ્પિક રીતે, તમે મેન્યુઅલ બાઇન્ડિંગથી બચવા માટે એરો ફંક્શનનો ઉપયોગ કરી શકો છો:


handleClick = () => {
  this.setState({ count: this.state.count + 1 });
};



8. What is the purpose of `super()` in the constructor of a class component?

ઉત્તર:  
`super()` એ પેરન્ટ ક્લાસ (`React.Component`)ના કન્સ્ટ્રકટરને કૉલ કરવા માટે ઉપયોગ થાય છે અને કોમ્પોનન્ટને યોગ્ય રીતે સેટ અપ કરે છે. `this`નો ઉપયોગ કરવો પહેલાં `super()`ને કૉલ કરવું જરૂરી છે.


class MyComponent extends React.Component {
  constructor() {
    super(); // પેરન્ટ ક્લાસ કન્સ્ટ્રકટર કૉલ કરે છે
    this.state = { count: 0 };
  }
}



9. How do you update the state based on the previous state in class components?

ઉત્તર:  
તમે `setState()`ને ફંક્શન આપે શકો છો જે પહેલાંના સ્ટેટને આપના તર્ક તરીકે મળે છે. આનો અર્થ એ થાય છે કે સ્ટેટનો અપડેટ છેલ્લાં સ્ટેટ મૂલ્ય પર આધારિત રહેશે.


this.setState(prevState => {
  return { count: prevState.count + 1 };
});



10. What is `shouldComponentUpdate()` in React class components?

ઉત્તર:  
`shouldComponentUpdate()` એ એક લાઈફસાયકલ મિથોડ છે જે નક્કી કરે છે કે કોમ્પોનન્ટને ફરીથી રેન્ડર થવું જોઈએ કે નહિ. આ `nextProps` અને `nextState` એર્ગ્યુમેન્ટ્સ તરીકે પ્રાપ્ત કરે છે અને બૂલીયન (આધિકૃત અથવા ખોટું) રીટર્ન કરે છે. જો તે ખોટું પરત કરે છે, તો React રેન્ડર પ્રક્રિયાને સ્કિપ કરશે.


class MyComponent extends React.Component {
  shouldComponentUpdate(nextProps, nextState) {
    return nextState.count !== this.state.count; // ફક્ત જો count બદલાય તો રેન્ડર કરવું
  }
}



1. JSX શું છે?
JSX એ JavaScript XML નો સંક્ષેપ છે, અને તે React સાથે ઉપયોગ માટે JavaScript માટેનો સિનટેક્સ એક્સ્ટેન્શન છે. JSX તમને JavaScript માં HTML જેવી કોડ લખવાની મંજૂરી આપે છે, જે પછી React દ્વારા JavaScript ફંક્શન્સમાં પરિવર્તિત થાય છે.


const element = <h1>Hello, World!</h1>;



2. JSX React માં કેવી રીતે કાર્ય કરે છે?
JSX ને React.createElement કોલ્સમાં ફેરવવામાં આવે છે. React આ કોલ્સનો ઉપયોગ વર્ચ્યુઅલ DOM બનાવવા માટે કરે છે, જે પછી મૂળ DOM માં રેન્ડર થાય છે. JSX એ `React.createElement()` માટેનું વિધિવਤ સિનટેક્સ છે.


const element = <h1>Hello, World!</h1>;
// આમાં પરિવર્તિત થાય છે:
const element = React.createElement('h1', null, 'Hello, World!');



3. React માં JSX નો ઉપયોગ કરવો જરૂરી છે?
ના, તે કટોકટીપૂર્વક જરૂરી નથી. તમે `React.createElement()` ને સીધા ઉપયોગ કરી શકો છો અને JSX વિના એલેમેન્ટ્સ બનાવી શકો છો. તેમ છતાં, JSX વધુ સંક્ષિપ્ત અને સમજવામાં સહેલો છે, જે તે React માં વ્યાપકપણે ઉપયોગ થાય છે.


4. JSX નો ઉપયોગ કરવા ના ફાયદા શું છે?
- વાંચનીયતા: JSX `React.createElement()` કોલ્સ કરતા વધુ વાંચી શકાયું અને લખવામાં સરળ છે.
- ડિકલેરેટિવ syntax: આ તમારી UI ને વધુ ડિકલેરેટિવ અને સ્વાભાવિક રીતે વ્યાખ્યાયિત કરવા આપે છે.
- એરર હેન્ડલિંગ: JSX એ સામાન્ય ભૂલોને પકડી રાખે છે, જેમ કે માઇસિંગ ક્લોઝિંગ ટૅગ્સ, જે કંપાઇલ ટાઈમ પર થાય છે, નહી કે રનટાઈમ પર.



5. શું તમે JSX માં JavaScript એક્સપ્રેશન લખી શકો છો?
હા, તમે JSX માં JavaScript એક્સપ્રેશનો `{}` બરાબર ઘેરાઓમાં લખી શકો છો. ઉદાહરણ તરીકે, તમે એફરેટ કરેલા વેરિએબલનું મૂલ્ય પ્રદર્શિત કરી શકો છો અથવા ગણતરી કરી શકો છો.


const name = "John";
const element = <h1>Hello, {name}!</h1>;


6. તમે JSX માં સસશકલી રીતે કન્ટેન્ટ કેવી રીતે રેન્ડર કરો છો?
તમારા JSX માં કન્ટેન્ટને સસશકલી રેન્ડર કરવા માટે તમે JavaScript ઓપરેટર્સ જેમ કે `if`, ternary operator, અથવા logical `&&` નો ઉપયોગ કરી શકો છો.


const isLoggedIn = true;
const element = <h1>{isLoggedIn ? "Welcome back!" : "Please sign up"}</h1>;


7. JSX માં `key` નો શું ઉદ્દેશ છે?
JSX માં `key` એ એટ્રિબ્યૂટ છે જે React ને આઇટમ્સની ઓળખ કરવામાં મદદ કરે છે જે યાદીમાંથી બદલાઈ રહી છે, ઉમેરાઈ રહી છે, અથવા હટાવવામાં આવી રહી છે. તે યાદી રેન્ડરિંગના પ્રદર્શનને સુધારે છે અને React ને ફરીથી રેન્ડર ઓપ્ટિમાઇઝ કરવામાં મદદ કરે છે.


const items = ["Apple", "Banana", "Cherry"];
const listItems = items.map((item, index) => <li key={index}>{item}</li>);



8. JSX માં ઇવેન્ટ્સ કેવી રીતે હેન્ડલ કરો છો?
JSX માં ઇવેન્ટ્સ હેન્ડલ કરવા માટે તમે camelCase નામકરણ સંવિધાનનો ઉપયોગ કરી શકો છો. જેમ કે, `onclick` ના બદલે JSX માં `onClick` નો ઉપયોગ કરવો પડે છે. ઇવેન્ટ હેન્ડલર્સ ફંક્શન તરીકે પસાર કરવામાં આવે છે.


function handleClick() {
  alert("Button clicked!");
}

const element = <button onClick={handleClick}>Click Me</button>;



9. તમે JSX બ્લોકમાંથી બધી પરિબળોને રિટર્ન કરી શકો છો?
હા, પરંતુ પરિબળોને એક માત્ર પેરેન્ટ પરિબળ (જેમ કે `<div>` અથવા React Fragment) માં લપેટવું પડશે. તમે `React.Fragment` અથવા ટૂંકી સિંટેક્સ `<> </>` નો ઉપયોગ કરી શકો છો, જે DOM માં વધારાની નોડ્સ ઉમેર્યા વિના અનેક પરિબળો રિટર્ન કરે છે.


const element = (
  <>
    <h1>Hello</h1>
    <p>Welcome to React</p>
  </>
);


---

10. JSX અને HTML વચ્ચે શું તફાવત છે?
- HTML: HTML એટ્રિબ્યૂટ્સ જેમ કે `class`, `for`, અને `style` JSX માં અલગ છે.
- JSX: JSX માં, `class` એ `className` બને છે, `for` એ `htmlFor` બને છે, અને `style` એક ઓબ્જેક્ટ તરીકે પાસ કરવામાં આવે છે.


const element = <div className="myClass" htmlFor="inputField">Hello</div>;




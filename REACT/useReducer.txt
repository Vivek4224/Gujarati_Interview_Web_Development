1. What is `useReducer` in React?

Answer:  
`useReducer` એ React માં એક hook છે જે ફંક્શનલ કોમ્પોનેન્ટમાં વધુ કંપ્લેક્સ સ્ટેટ લોજિકને મેનેજ કરવા માટે ઉપયોગ થાય છે. તે `useState` ના સમાન છે, પરંતુ તે માત્ર સ્ટેટને અપડેટ કરવાને બદલે, સ્ટેટ ટ્રાન્ઝિશન્સને હેન્ડલ કરવા માટે એક રિડ્યૂસર ફંક્શનનો ઉપયોગ કરે છે. જ્યારે સ્ટેટ લોજિક વધુ કંપ્લેક્સ હોય અથવા બહુવિધ સબ-વેલ્યુઝ અથવા એક્શનના સમાવેશ થાય ત્યારે સામાન્ય રીતે `useReducer` નો ઉપયોગ થાય છે.

ઉદાહરણ:

const initialState = { count: 0 };

function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <p>{state.count}</p>
      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>
    </div>
  );
}



2. How does `useReducer` differ from `useState`?

Answer:  
- **`useState`** એ સરળ સ્ટેટ મેનેજમેન્ટ માટે ઉપયોગમાં આવે છે, સામાન્ય રીતે જ્યારે સ્ટેટ મૂલ્યો પ્રિમિટિવ પ્રકારના હોય અથવા ફક્ત એક જ મૂલ્ય હોય.
- **`useReducer`** એ વધુ કંપ્લેક્સ સ્ટેટ માટે ઉપયોગ થાય છે, ખાસ કરીને જ્યારે આગામી સ્ટેટ પૃથ્વી પર આધાર રાખે છે અથવા તેમાં બહુવિધ સબ-વેલ્યુઝ હોય. તે વધુ ગોઠવણબદ્ધ રીતે એક્શનને હેન્ડલ કરવાની સુવિધા આપે છે, જે Redux ની સમાન છે.

`useReducer` માં, રિડ્યૂસર ફંક્શન એ વ્યાખ્યાયિત કરે છે કે કેવી રીતે સ્ટેટ વિવિધ એક્શન પર આધાર રાખીને બદલાશે.



3. When should you use `useReducer` over `useState`?

Answer:  
તમારે `useReducer` નો ઉપયોગ ત્યારે કરવો જોઈએ જ્યારે:
- સ્ટેટ લોજિક કંપ્લેક્સ હોય અને તેમાં બહુવિધ સબ-વેલ્યુઝનો સમાવેશ થાય.
- સ્ટેટ ફેરફારો પૃથ્વી પર આધાર રાખે છે.
- તમને વધુ કંપ્લેક્સ એક્શનને હેન્ડલ કરવાની જરૂર હોય (જેમ કે વપરાશકર્તાના ઇવેન્ટ્સ અથવા API પ્રતિસાદના જવાબ તરીકે).
- તમે વધુ ગોઠવણબદ્ધ રીતે સ્ટેટ મેનેજ કરવા માંગો છો (Redux ની સમાન રીતે).

સરળ સ્ટેટ અપડેટ માટે, `useState` સામાન્ય રીતે વધુ યોગ્ય અને સંક્ષિપ્ત રહે છે.


4. What are the parameters of the `useReducer` hook?

Answer:  
`useReducer` બે પેરામિટર લે છે:
1. **રિડ્યૂસર ફંક્શન**: એ ફંક્શન જે વિશિષ્ટ કરે છે કે સ્ટેટ કઈ રીતે એક્શનના પ્રતિસાદ રૂપે બદલાશે.
2. **પ્રારંભિક સ્ટેટ**: એ પ્રારંભિક સ્ટેટ મૂલ્ય જે કોઈ પણ એક્શન ડિસ્પેચ કર્યા પછી પહેલા હોય છે.

રિડ્યૂસર ફંક્શન વર્તમાન સ્ટેટ અને એક્શનને પ્રાપ્ત કરે છે અને નવા સ્ટેટને પરત આપે છે.


const [state, dispatch] = useReducer(reducer, initialState);



5. What is the reducer function?

Answer:  
Reducer ફંક્શન એ એ ફંક્શન છે જે વાચકને નિયંત્રિત કરે છે કે કેમ સ્ટેટને ખાસ એક્શનના પ્રતિસાદ તરીકે કેવી રીતે અપડેટ કરવું. તે બે દલીલો લે છે:
1. **`state`**: વર્તમાન સ્ટેટ.
2. **`action`**: એ ઑબ્જેક્ટ જે એ એક્શનને વર્ણવે છે જે કરવામાં આવી રહી છે.

આ નવા સ્ટેટને પરત આપે છે.

Reducer ફંક્શનનું ઉદાહરણ**:


function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    default:
      return state;
  }
}



6. How do you dispatch an action with `useReducer`?

Answer:  
`useReducer` સાથે એક્શનને ડિસ્પેચ (dispatch) કરવાના માટે, તમારે `dispatch` ફંક્શનનો ઉપયોગ કરવો પડે છે, જે `useReducer` દ્વારા પાછું આપવામાં આવે છે. એક્શન સામાન્ય રીતે એક ઑબ્જેક્ટ હોય છે જેમાં `type` હોય છે અને સંભવત: તેની સાથે વધુ ડેટા હોય છે જે સ્ટેટને અપડેટ કરવા માટે ઉપયોગી હોય છે.

ઉદાહરણ:


dispatch({ type: 'increment' });  // 'increment' પ્રકાર સાથે એક્શન



7. Can you pass additional data in the action when dispatching?

Answer:  
હા, તમે એક્શન ઑબ્જેક્ટમાં વધારાનું ડેટા પાસ કરી શકો છો. આ ખાસ કરીને ઉપયોગી છે જ્યારે તમને સ્ટેટને ગતિશીલ મૂલ્ય સાથે અપડેટ કરવાની જરૂર હોય.

ઉદાહરણ:


dispatch({ type: 'setCount', payload: 5 });  // 'payload' સાથે એક્શન જેમાં ગતિશીલ ડેટા છે


Reducer માં તમે આ ડેટાને હેન્ડલ કરી શકો છો:


function reducer(state, action) {
  switch (action.type) {
    case 'setCount':
      return { count: action.payload };
    default:
      return state;
  }
}



8. Can `useReducer` be used with asynchronous actions?

Answer:  
`useReducer` એ સ્વરૂપે આસરતી ક્રિયાઓને સીધી રીતે હેન્ડલ નથી કરે. તેમ છતાં, તમે `useEffect` અથવા `async` ફંક્શન્સ જેવી સાઈડ-એફેક્ટ્સનો ઉપયોગ કરીને આસરતી એક્શનને ડિસ્પેચ કરી શકો છો.

`useEffect` અને `async` સાથે ઉદાહરણ:


function fetchData(dispatch) {
  fetch('https://api.example.com/data')
    .then(response => response.json())
    .then(data => {
      dispatch({ type: 'setData', payload: data });
    });
}

function MyComponent() {
  const [state, dispatch] = useReducer(reducer, initialState);

  useEffect(() => {
    fetchData(dispatch);
  }, []);

  return <div>{state.data}</div>;
}




### **9. How do you use multiple `useReducer` hooks in a single component?**

**Answer**:  
તમે એક જ કંપોનેન્ટમાં એકથી વધુ `useReducer` હૂક્સનો ઉપયોગ કરી શકો છો, જે દરેક સ્ટેટના અલગ ભાગને સ્વતંત્ર રીતે મેનેજ કરે છે. દરેક `useReducer` પોતાની જાતની સ્ટેટ અને પોતાની જાતનો `dispatch` ફંક્શન મેનેજ કરે છે.

ઉદાહરણ:


const [countState, dispatchCount] = useReducer(countReducer, { count: 0 });
const [textState, dispatchText] = useReducer(textReducer, { text: '' });

function MyComponent() {
  return (
    <div>
      <p>{countState.count}</p>
      <button onClick={() => dispatchCount({ type: 'increment' })}>Increment</button>

      <p>{textState.text}</p>
      <button onClick={() => dispatchText({ type: 'updateText', payload: 'Hello' })}>
        Update Text
      </button>
    </div>
  );
}




10. What are the advantages of using `useReducer` over `useState`?

Answer:  
- **કંપ્લેક્સ સ્ટેટનું વધુ સારો વ્યવસ્થાપન**: `useReducer` એ વધુ કંપ્લેક્સ સ્ટેટ મેનેજ કરવા માટે શ્રેષ્ઠ છે, જેમાં બહુવિધ સબ-મુલ્યો અથવા વધુ કંપ્લેક્સ સ્ટેટ ટ્રાન્ઝિશન હોય.
- **વધુ આગોતરી સ્ટેટ અપડેટ્સ**: તે એક જ રિડ્યૂસર ફંક્શનમાં સ્ટેટ અપડેટ લોજિકને કેન્દ્રિત કરે છે, જે એ સ્ટેટ કેવી રીતે બદલાય તે સમજવામાં સહેલું બનાવે છે.
- **UI થી સ્ટેટ લોજિકને અલગ પાડે છે**: `useReducer` સ્ટેટ ફેરફારોને UI કોમ્પોનેન્ટથી અલગ કરે છે, જે તેને જાળવવામાં અને પરીક્ષણ કરવામાં સહેલું બનાવે છે.

`useReducer` એ ખાસ કરીને ઉપયોગી છે જ્યારે કંપોનેન્ટમાં અનેક સ્ટેટ વેરીયેબલ્સ હોય છે, જે વિવિધ એક્શન પર આધાર રાખે છે.



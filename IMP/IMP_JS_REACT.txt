1. What is JavaScript?
ans:- JavaScript એ એક ઓબ્જેક્ટ based પ્રોગ્રામિંગ language છે, જે મુખ્યત્વે HTML પેજ સાથે ક્લાયન્ટ-સાઇડ પ્રોગ્રામિંગ language તરીકે ઉપયોગ કરવામાં આવે છે, જેથી એમાં થોડું વર્તન (behavior) ઉમેરવામાં આવે.

પ્રથમ, JavaScript માત્ર બ્રાઉઝર માટે બનાવવામાં આવી હતી, પરંતુ હવે તે સર્વર અથવા કોઈપણ ક્લાયન્ટ પર ચલાવવામાં આવી શકે છે, જેમણે JavaScript એન્જિન ધરાવવી હોય. Node.js, MongoDB, jaggery.js, ASP જેવા પ્રોડક્ટ્સ સર્વર-સાઇડ JavaScript નો ઉપયોગ કરે છે.

બ્રાઉઝર માં JavaScript ઘણા કામો કરી શકે છે જેમ કે નીચે દર્શાવેલા છે:

HTML એલિમેન્ટ્સને મેનિપ્યુલેટ કરવું.
યૂઝર એકશન પર feedback આપવો, જેમ કે જ્યારે યૂઝર માઉસ ક્લિક કરે અથવા કીબોર્ડનો ઉપયોગ કરે ત્યારે Event ચલાવવી.
રિમોટ સર્વર પર રિક્વેસ્ટ મોકલવી.
ફાઇલો ડાઉનલોડ અને અપલોડ કરવી.
કૂકીઝ મેળવી અને સેટ કરવી અને ક્લાયન્ટ-સાઇડ સ્ટોરેજ (લોકલ અને સેશન સ્ટોરેજ) હેન્ડલ કરવું.

JavaScript નો ઉપયોગ કરવાની મુખ્ય ફાયદાઓ:
HTML/CSS સાથે સંપૂર્ણ ઈન્ટિગ્રેશન.
બધા મુખ્ય બ્રાઉઝર્સ દ્વારા સપોર્ટેડ, જે સ્વચ્છ રીતે ડિફોલ્ટ પર ચાલુ હોય છે.


2. What is ECMAScript?

Ans: ECMAScript એ એક સ્ક્રિપ્ટિંગ language છે જે ECMA International દ્વારા ECMA-262 માં સ્ટાન્ડર્ડાઈઝ કરવામાં આવી છે. ActionScript, JavaScript અને ઘણી બીજી સ્ક્રિપ્ટિંગ language માં ECMAScript ઉપયોગમાં લેવામાં આવે છે. એમાં, JavaScript એ એક પ્રખ્યાત ક્લાયન્ટ-સાઇડ સ્ક્રિપ્ટિંગ language છે અને ECMAScript નું એક implementation છે, કારણ કે આ સ્ટાન્ડર્ડ પ્રકાશિત થયો હતો. હાલનું વર્ઝન ECMAScript 6 છે.

ECMAScript સામાન્ય રીતે JavaScript નું સ્ટાન્ડર્ડાઈઝડ વર્ઝન છે અને એક સામાન્ય ઉદ્દેશ માટેની પ્રોગ્રામિંગ language છે, જે JavaScript અને અન્ય language માં અમલમાં આવે છે. એ એક સ્ક્રિપ્ટિંગ language છે જેના પર બ્રાઉઝર-આધારિત JavaScript અને Node.js પણ વિકસિત થયા છે.


3. Which data types are supported by JavaScript?

Ans: JavaScript એ ડાયનેમિકલી ટાઇપ્ડ language છે, એટલે કે, ત્યાં એક ડેટા ટાઇપ છે, પરંતુ તે ચોક્કસ પ્રકાર સાથે બાઉન્ડ નથી. Example તરીકે, જ્યારે વેરીએબલને ઇનિશિયાલાઈઝ કરવામાં આવે છે, તે સ્ટ્રિંગ પ્રકારનો હોઈ શકે છે, પરંતુ પછી તે નમ્બર મૂલ્ય પણ ધારણ કરી શકે છે.

JavaScript માં બે પ્રકારના ડેટા ટાઇપ્સ સપોર્ટ કરવામાં આવે છે: પ્રિમિટિવ ડેટા ટાઇપ્સ અને નોન-પ્રિમિટિવ ડેટા ટાઇપ્સ. નીચે JavaScript માં સપોર્ટ થયેલ કેટલાક ડેટા ટાઇપ્સ છે:

I. પ્રિમિટિવ ડેટા ટાઇપ્સ (Primitive Data Types):
String: ટેક્સ્ટ અથવા શબ્દોની શ્રેણી.
Number: આલ્જિબ્રાઇક અને એન્ટિગર નંબર્સ.
Boolean: સત્ય (true) અથવા ખોટું (false) મૂલ્ય.
Undefined: જ્યારે કોઈ વેરીએબલને મૂલ્ય આપાયું નથી ત્યારે તે undefined હોય છે.
Null: ખાલી અથવા ગેરમુલ્ય અથવા એન્શિઅલાઈઝ્ડ નથી થયેલું મૂલ્ય.
Symbol: અનન્ય અને અપક્ષય મૂલ્ય (ES6 માં ઉમેરાયું).
BigInt: મોટા પરિમાણોની સંખ્યા (ES11 માં ઉમેરાયું).

II. નોન-પ્રિમિટિવ ડેટા ટાઇપ્સ (Non-Primitive Data Types):
Object: કી-વેલ્યુ પેર માટે સ્ટોર કરાયેલી આકૃતિઓ (જેમ કે Array, ફંક્શન, વગેરે).
Array: સંખ્યાબંધ વેલ્યુઝની શ્રેણી (જેને ઇન્ડેક્સ દ્વારા access કરી શકાય છે).
Function: કોઈ ખાસ કાર્ય માટે લખાયેલા કોડના બ્લોક.


6. What is the instanceof operator?

Ans: 

`instanceof` ઓપરેટર ચેક કરે છે કે કોઈ ઑબ્જેક્ટ એ કોઈ ક્લાસનું ઇન્સ્ટાન્સ છે કે નહીં.


7. What is the strict mode?

Ans:
“use strict” એ એક સ્ટેટમેન્ટ નથી, પરંતુ એક લિટરલ એક્સપ્રેશન છે જે ECMAScript સંસ્કરણ 5 દ્વારા સપોર્ટ કરવામાં આવ્યું છે. આ સ્ટેટમેન્ટ બ્રાઉઝરને(strict mode) સક્રિય કરવા માટે કહે છે, જે JavaScript માં વધુ સુરક્ષિત અને ખોટી ભૂલો દૂર કરવા માટે તૈયાર છે. આ સ્ટેટમેન્ટ કેટલીક JavaScript ની સિલેન્ટ ભૂલોને દૂર કરે છે.

Strict mode આખી સ્ક્રિપ્ટ અથવા વ્યક્તિગત ફંક્શન્સ પર લાગુ પડે છે, અને તે બ્લોક સ્ટેટમેન્ટ્સ અથવા કોડ (જે `{}` કળરી બ્રેસ દ્વારા ઢાંકેલ છે) પર લાગુ નથી પડતું. આ કોન્ટેક્સ્ટ્સમાં તે લાગુ પાડવાનો પ્રયાસ કરવો અર્થરહિત છે. eval કોડ, ફંક્શન કોડ, ઈવેંટ હેન્ડલર એટ્રિબ્યુટ્સ, setTimeout() અને સંબંધિત ફંક્શન્સમાં પણ strict mode લાગુ થાય છે, જે તેમને સિન્ટેક્સ અને ખોટી ભૂલો ચકાસવા માટે કાર્ય કરે છે.


12. Array અને Object વચ્ચે શું તફાવત છે?

Ans: Array અને Object વચ્ચે નીચે મુજબના તફાવત છે:

# Array:- 
Array એ numbered indexes નો ઉપયોગ કરીને એલેમેન્ટને access કરે છે.
જ્યારે તમે એલેમેન્ટનું નામ number તરીકે રાખવા માંગો છો ત્યારે array નો ઉપયોગ કરો.
Array ordered collection છે.

# Object:- 
Object એ named indexes નો ઉપયોગ કરીને એલેમેન્ટને નાં members (મેમ્બર)ને access કરે છે.
જ્યારે તમે એલેમેન્ટનું નામ string તરીકે રાખવા માંગો છો ત્યારે object નો ઉપયોગ કરો.
Object unordered properties નો કલેક્શન છે.


13. Self-executing function શું છે?

Ans: Self-executing function એ એવી ફંક્શન છે જે તેના ડિફાઇન થયા પછી તરત જ એક્ઝિક્યુટ (ચલાવવાં) થાય છે. આનો ફાયદો એ છે કે આ ફંક્શન કોડને ગ્લોબલ ડીક્લેર કર્યા વિના ચલાવશે. આ પ્રકારની ફંક્શન સામાન્ય રીતે DOM એલેમેન્ટ્સ પર event listeners લગાવવા અને અન્ય initialization કાર્ય માટે ઉપયોગમાં લેવાય છે.

આ પ્રકારની self-executing function એ નામ વગરની ફંક્શન હોય છે, જેને anonymous function કહેવામાં આવે છે. આ ફંક્શનની પાછળ parentheses (ગોળાં) હોય છે, જેમાં કોઈ આર્ગ્યુમેન્ટ્સ ના હોય. આ ફંક્શન માટે પેરામિટર્સ parentheses માં પસાર કરી શકાય છે.


14. Arrow function શું છે?

Ans: Arrow function એ Javascript માં ES6 (ECMAScript 6) અને તેનાથી ઉપરના વર્ઝન્સમાં આધારિત ફંક્શન છે, જે ફંક્શન એક્સપ્રેશન્સ લખવાની એ સરળ અને ટૂંકી રીત છે.


18. DOM શું છે?  

Ans: DOM એ W3C (World Wide Web Consortium) ધોરણ છે. જ્યારે HTML પેજ બ્રાઉઝરમાં લોડ થાય છે, ત્યારે બ્રાઉઝર DOM (Document Object Model) બનાવે છે. આ HTML element ઓબ્જેક્ટ તરીકે defined કરે છે અને સ્ક્રિપ્ટોને document ની properties અને composition માં dynamic રીતે ફેરફાર કરવા માટેની અનુમતિ આપે છે.

જ્યારે કોઈ HTML Document બ્રાઉઝરમાં લોડ થાય છે, તે Document ઓબ્જેક્ટ બની જાય છે, જે HTML Documentનું root element છે. દરેક DOM element માં વિવિધ પ્રોપર્ટી અને method હોય છે. અને Document ઑબ્જેક્ટ્સની મદદથી, વેબ પેજ પર જરૂરી વર્તન મુજબ dynamic content ઉમેરવા માટે powerfull રીતે work કરી શકીએ છીએ.


19. BOM શું છે?  

Ans: BOM (Browser Object Model) બ્રાઉઝર સાથેની interaction provides કરે છે, બ્રાઉઝરનો ડિફોલ્ટ ઓબ્જેક્ટ `window` છે. વિન્ડોઝ દ્વારા provides કરવામાં આવતી વિવિધ પ્રોપર્ટીઓમાં Document, history, screen, location, and navigator શામેલ છે.

આધુનિક બ્રાઉઝર્સે JavaScript Opration માટે BOM ની method અને પ્રોપર્ટીઓ માટે એક જ method અને પ્રોપર્ટીઓ અમલમાં મૂકીને BOM ને માન્ય બનાવ્યું છે. `window` ઓબ્જેક્ટ એ automatically બ્રાઉઝર દ્વારા બનાવવામાં આવે છે.



24. "this" કીવર્ડને સમજાવો.  

"this" કીવર્ડ તે ઓબ્જેક્ટને દર્શાવે છે જે ફંક્શનનો પ્રોપર્ટી હોય છે. "this" કીવર્ડનો મૂલ્ય એ ઓબ્જેક્ટ પર આધાર રાખે છે જે ફંક્શનને call કરે છે.


25. `.call()` અને `.apply()` વચ્ચેનો તફાવત સમજાવો.  

Ans: `.apply()` અને `.call()` ફંક્શનનું ઉપયોગ ખૂબ જ સમાન છે, પરંતુ થોડી બેદલાવ હોય છે. 

- `.call()`: જ્યારે પ્રોગ્રામર ને ફંક્શનના આર્ગ્યુમેન્ટ્સની સંખ્યા જાણે છે, ત્યારે `.call()` નો ઉપયોગ થાય છે. આ આર્ગ્યુમેન્ટ્સને સીધા `.call()` સ્ટેટમેન્ટમાં પેરામીટર્સ તરીકે આપવું પડે છે.

- `.apply()`: જ્યારે આર્ગ્યુમેન્ટ્સની સંખ્યા unknown હોય, ત્યારે `.apply()` નો ઉપયોગ થાય છે. `.apply()` માટે આર્ગ્યુમેન્ટ એ Array ફોર્મેટમાં આપવું પડે છે.

પ્રમુખ તફાવત: આ બંને ફંક્શનનો મુખ્ય તફાવત એ છે કે તેઓ આર્ગ્યુમેન્ટ્સને ફંક્શન સુધી કેવી રીતે send કરે છે. `.call()` આર્ગ્યુમેન્ટ્સને અલગથી provide કરે છે, જ્યારે `.apply()` એ એક Array તરીકે pass થાય છે. 


26. JavaScript માં DOM કેવી રીતે ઉપયોગી છે? 

Ans: DOM (Document Object Model) એ document માં વિવિધ ઓબ્જેક્ટ્સની પરસ્પર Action નિયંત્રિત કરવા માટે જવાબદાર છે. આ વેબ પેજો develop માટે ઉપયોગી છે જે લિંક, પેરાગ્રાફ અને અન્ય ઓબ્જેક્ટ્સ ધરાવે છે. આવા ઓબ્જેક્ટ્સ પર Action લાગૂ કરી શકાય છે જેમ કે ઉમેરવું અથવા કાઢી નાખવું. એ ઉપરાંત, DOM એ વેબ પેજને વધારાના ફીચર્સ અને ક્ષમતા પ્રદાન કરવા માટે પણ ઉપયોગી છે. APIના ઉપયોગથી અન્ય Distortion મોડલ્સની તુલનામાં વધુ લાભ મળે છે.



34. JavaScript માં `debugger` કીવર્ડનો ઉપયોગ શું છે?

Ans:

`debugger` કીવર્ડ કોડમાં બ્રેકપોઈન્ટ સેટ કરવા માટે ઉપયોગ કરવામાં આવે છે. જ્યારે કોડ પર `debugger` કીવર્ડ Array નો ઉપયોગ થાય છે, ત્યારે તે પ્રોગ્રામના implement ને અટકાવે છે અને તમને મેન્યુઅલી એક્ઝેક્યુશન ફ્લો ચાલુ કરવા માટે મંજૂરી આપે છે. જો કોઈ અપવાદ (exception) થાય છે, તો અમલ ફરીથી તે સ્પષ્ટ લાઇન પર અટકી જશે.


38. JavaScript માં higher order function ને સમજાવો.

Ans:

higher order function એ એવી ફંક્શન છે જે બીજી ફંક્શન પર કાર્ય કરે છે, અથવા તો તેમને આર્ગ્યુમેન્ટ્સ તરીકે લે છે અથવા તેમને રિટર્ન કરે છે. higher order function એ પરિણામ છે કે JavaScript માં ફંક્શનને "ફર્સ્ટ-ક્લાસ સિટીઝન" તરીકે માનવામાં આવે છે, જેનો અર્થ એ છે કે ફંક્શનને મૂલ્ય તરીકે પાસ કરવામાં, રિટર્ન કરવામાં અને સ્ટોર કરવામાં શકાય છે.


39. API શું છે ?

Ans:-

API નો અર્થ છે Application Programming Interface. એ સેટ છે જે rules, પ્રોટોકોલ અને ટૂલો પૂરો પાડે છે, જે બે અલગ સોફ્ટવેર એપ્લિકેશન્સને એકબીજાં સાથે Communication કરવા માટે મદદ કરે છે. API એ તે method અને ડેટા ફોર્મેટને Defined કરે છે, જે એપ્લિકેશન્સ ડેટાની request અને Exchange કરવા માટે ઉપયોગ કરે છે.

સરળ શબ્દોમાં, API એ રેસ્ટોરન્ટમાં વેટર જેવો છે. જ્યારે તમે વેટરને (API) ઓર્ડર આપો છો, ત્યારે તે રસોઈઘર (સર્વર) માં જઇને તમારો ઓર્ડર લઈને પાછો આવે છે અને તમારે જોઈએ તે જ વસ્તુ આપે છે. વેટર એ જાણતો નથી કે ખોરાક કેવી રીતે તૈયાર થાય છે, પરંતુ તે જાણે છે કે ઓર્ડર કેવી રીતે આપવું અને જવાબ કેવી રીતે લાવવો.

APIના પ્રકાર:

1. વેબ API (HTTP API):
   - આ API ઇન્ટરનેટ પર Communication માટે ઉપયોગ થાય છે, સામાન્ય રીતે HTTP પ્રોટોકોલનો ઉપયોગ કરે છે. Example તરીકે RESTful APIs, SOAP APIs અને GraphQL APIs.
   
2. લાઇબ્રેરી API:
   - લાઇબ્રેરીઓ દ્વારા પૂરી પાડવામાં આવેલા API એ Programs ને લાઇબ્રેરી સાથે appended થવા માટેની પરવાનગી આપે છે. Example તરીકે, ગણિત લાઇબ્રેરીના API નો ઉપયોગ ગણના માટે થઈ શકે છે.

3. ઓપરેટિંગ સિસ્ટમ API:
   - આ API ઓ Programs ને ઓપરેટિંગ સિસ્ટમ સાથે appended થવા માટે પરવાનગી આપે છે, જેમ કે મેમરી management, ઇનપુટ/આઉટપુટ ઓપરેશન્સ.

APIના ઉપયોગના Exampleો:

1. સોશિયલ મીડિયા API:
   - જેમ કે Facebook અથવા Twitter API, જે બીજા એપ્લિકેશન્સને પોસ્ટ કરવાનું, યુઝર ડેટા ફેચ કરવાનું અથવા સોશિયલ મીડિયા એકાઉન્ટ સાથે સેવાઓ કરવાની પરવાનગી આપે છે.
   
2. પેમેન્ટ API:
   - PayPal અને Stripe જેવા સર્વિસ Providers પેમેન્ટ પ્રોસેસ કરવા માટે API પૂરી પાડે છે.

3. મોસમ API:
   - OpenWeatherMap અથવા Weather.com જેવા મોસમ સેવાવાળાઓ API પૂરી પાડે છે, જે એપ્લિકેશન્સને મોસમ સંબંધિત ડેટા મેળવવા માટે ઉપયોગ થાય છે.

API કેવી રીતે કાર્ય કરે છે:

- request: એક ક્લાયન્ટ (જેમ કે વેબ બ્રાઉઝર અથવા મોબાઈલ એપ) સર્વર પર API request મોકલે છે. આ request ડેટા મેળવવા અથવા ક્રિયા કરવા માટે થઈ શકે છે.
- Processing: સર્વર request નું Processing કરે છે અને ડેટાબેસ સાથે અથવા જરૂરી પરિણામ આપે છે.
- Feedback: સર્વર result ક્લાયન્ટને મોકલે છે, જે તેને દેખાડે છે અથવા ઉપયોગ કરે છે.

### સારાંશ:
API એ સોફ્ટવેર એપ્લિકેશન્સને પરિભાષિત કરેલા નિયમો અને માળખા દ્વારા એકબીજાને જોડવા માટે પરવાનગી આપે છે, જે વિવિધ સિસ્ટમો વચ્ચે કાર્યક્ષમતાને સરળ બનાવે છે.


40. What is DataBase ?

Ans:- 

ડેટાબેસ એ ડેટા રાખવા અને મેનેજ કરવા માટેની એક structured method છે. ડેટાબેસમાં માહિતી structure wise સંગ્રહિત થાય છે, જેથી તે ઝડપથી મેળવી શકાય અને સરળતાથી અપડેટ (update) કે મેળવવામાં (retrieve) આવે. 

1. રિલેશનલ ડેટાબેસ (Relational Database): આ પ્રકારના ડેટાબેસમાં ડેટાને ટેબલમાં ગોઠવવામાં આવે છે. સૌથી લોકપ્રિય ઉદાહરણ છે MySQL, PostgreSQL, Oracle.
   
2. NoSQL ડેટાબેસ (NoSQL Database): આ પ્રકારના ડેટાબેસમાં એડજસ્ટેબલ અને Flexible માળખું હોય છે. ડેટાને JSON જેવા ફોર્મેટમાં સંગ્રહિત કરવામાં આવે છે. લોકપ્રિય ઉદાહરણ છે MongoDB, Cassandra.

3. ક્લાઉડ ડેટાબેસ (Cloud Database): આ ડેટાબેસને ક્લાઉડ (વિશ્વભરમાં એપ્રૂવિડ સર્વરો પર) પર સંગ્રહિત કરવામાં આવે છે. Firebase અને Amazon RDS આના ઉદાહરણ છે.



Variable in JavaScript

1. JavaScript માં વેરીએબલ શું છે?  
Ans: વેરીએબલ એ ડેટા value સ્ટોર કરવા માટેનો કન્ટેનર છે. JavaScript માં, વેરીએબલને `var`, `let`, અથવા `const` નો ઉપયોગ કરીને declare કરી શકાય છે.


2. `var`, `let`, અને `const` વચ્ચે શું ફરક છે? 
Ans:  
- `var`: global-scope, redeclare અને reassign કરી શકાય છે.  
- `let`: block-scope, reassign કરી શકાય છે પરંતુ redeclare નથી કરી શકાય.  
- `const`: block-scope, ન તો reassign કરી શકાય છે અને ન તો redeclare.


3. JavaScriptમાં વેરીએબલ હોઈસ્ટિંગ શું છે?  
Ans: વેરીએબલ હોઈસ્ટિંગ એ JavaScriptનું એવું વર્તન છે જેમાં વેરીએબલની declarations તેમના સ્કોપના title તરફ ખસેડી દેવામાં આવે છે જ્યારે execution થાય છે, પરંતુ તેમની શરૂઆતની મૂલ્ય (initializations) ખસેડી નથી.


1. What are operators in JavaScript?
Answer: ઓપરેટર્સ એ સિંબોલ્સ અથવા કીવર્ડ્સ છે જે value અને variable પર ક્રિયાઓ કરવા માટે વપરાય છે. તે ગણિતીય, અસાઇનમેન્ટ, તુલના, લોજિકલ અને અન્ય પ્રકારોમાં વિભાજિત કરવામાં આવે છે.



1. JavaScript માં Array શું છે?
Array એ એક ડેટા સ્ટ્રક્ચર છે જેનો ઉપયોગ એક જ variable માં અનેક values સંગ્રહ કરવા માટે થાય છે. આ values કોઈપણ ડેટા ટાઈપની હોઈ શકે છે.


1. DOM શું છે?  
DOM (Document Object Model) એ HTML Document ની બંધારણને નોડ્સના વૃક્ષ તરીકે દર્શાવે છે. દરેક નોડ પેજના એક ભાગને અનુરૂપ હોય છે (ઉદાહરણ તરીકે, એલીમેન્ટ્સ, એટ્રિબ્યુટ્સ, ટેક્સ્ટ).


1. What is an event in JavaScript?

JavaScript માં event એ એક ઘટના છે જે યુઝર ઇન્ટરએકશન્સ (જેમ કે ક્લિક્સ, કીપ્રેસ વગેરે) અથવા બ્રાઉઝરની બીજા તત્વો દ્વારા ટ્રિગર થઈ શકે છે, જેમ કે પેજ લોડ થવું અથવા રીઝાઈઝ થવું.


1. What is a function in JavaScript?

A function એ રિયૂઝેબલ કોડનું બ્લોક છે જે એક ખાસ કામ કરવાં માટે બનાવવામા આવે છે જયારે એને કૉલ કરાય છે.


1. What is an object in JavaScript?

Object એ કી-વેલ્યુ પેરના સંગ્રહ છે, જ્યાં કી string (અથવા Symbols) હોય છે અને વેલ્યુ કોઈપણ ડેટા પ્રકાર હોઈ શકે છે, જેમાં ફંક્શન, એરે, અથવા બીજાં ઓબ્જેક્ટ્સ પણ શામેલ હોઈ શકે છે.


1.Loop in Js?

Loop એ JavaScript માં એક control structure છે જે તમને એક બ્લોક કોડને ઘણા વખત માટે (repeat) કરવાનો allows આપે છે. આનું ઉપયોગ repetitive tasks ને automate કરવા માટે થાય છે, જ્યાં સુધી condition true રહે છે.

JavaScript માં Loop ના પ્રકારો:

1. for loop  
   `for` loop એ સૌથી સામાન્ય અને versatile loop છે. આનું ઉપયોગ ત્યારે થાય છે જયારે iteration નો સંખ્યા પહેલેથી જ જાણી હોય.

   Syntax:
  
   for (initialization; condition; increment/decrement) {
       // Code to be executed
   }
  

   **Example**:
   ```javascript
   for (let i = 0; i < 5; i++) {
       console.log(i); // Prints 0, 1, 2, 3, 4
   }
   ```

   - **initialization**: Loop શરૂ થવા પહેલાં એકવાર ચાલે છે (કાઉન્ટર initialize કરવા માટે).
   - **condition**: દરેક iteration પહેલાં ચકાસવામાં આવે છે. loop તે સમયે ચાલે છે જ્યારે condition `true` હોય.
   - **increment/decrement**: દરેક iteration પછી ચાલે છે, loop counter ને અપડેટ કરવા માટે.

2. while loop 
   `while` loop એ ત્યારે ઉપયોગ થાય છે જયારે તમે code ને ત્યાં સુધી repeat કરવા માંગો છો જયારે condition `true` હોય. Condition દરેક iteration પહેલાં evaluated થાય છે.

   **Syntax**:
   ```javascript
   while (condition) {
       // Code to be executed
   }
   ```

   **Example**:
   ```javascript
   let i = 0;
   while (i < 5) {
       console.log(i); // Prints 0, 1, 2, 3, 4
       i++;
   }
   ```

   Loop condition `true` evaluated થાય ત્યાં સુધી ચાલુ રહે છે. જો condition `false` હોય, તો loop ન ચાલે.

3. do...while loop  
   `do...while` loop એ `while` loop જેવું છે, પરંતુ condition code block execute થવા પછી evaluate થાય છે. એટલે કે, loop ની અંદરનું code ઓછામાં ઓછો એકવાર ચલાવાય છે, ભલે condition શરુઆતમાં `false` હોય.

   Syntax:
   ```javascript
   do {
       // Code to be executed
   } while (condition);
   ```

   Example:
   ```javascript
   let i = 0;
   do {
       console.log(i); // Prints 0, 1, 2, 3, 4
       i++;
   } while (i < 5);
   ```

   આ રીતે, loop નો code block ઓછામાં ઓછો એકવાર run થાય છે, ભલે condition `false` હોય.

4. for...in loop 
   `for...in` loop નો ઉપયોગ object ના **keys** (properties) પર iterate (ચલાવવી) માટે થાય છે.

   **Syntax**:
   ```javascript
   for (let key in object) {
       // Code to be executed
   }
   ```

   **Example**:
   ```javascript
   const person = { name: "Alice", age: 25, city: "New York" };
   for (let key in person) {
       console.log(key + ": " + person[key]); 
   }
   // Output:
   // name: Alice
   // age: 25
   // city: New York
   ```

   આ loop `person` object ના દરેક key પર iterate કરે છે.

5. for...of loop 
   `for...of` loop નો ઉપયોગ iterable objects જેવા કે arrays, strings, વગેરે પર values iterate કરવા માટે થાય છે.

   **Syntax**:
   ```javascript
   for (let value of iterable) {
       // Code to be executed
   }
   ```

   **Example**:
   ```javascript
   const arr = [10, 20, 30, 40];
   for (let value of arr) {
       console.log(value); // Prints 10, 20, 30, 40
   }
   ```

   આ loop array ની values પર iterate કરે છે અને દરેક value પર code execute કરે છે.

---

### Loop ના પ્રકારોની સીરફી:

1. **for loop**: જયારે iteration ના સંખ્યા заранее જાણી હોય ત્યારે શ્રેષ્ઠ.
2. **while loop**: Executes code as long as condition `true` હોય, અને condition પહેલેથી check થાય છે.
3. **do...while loop**: `while` જેવું, પરંતુ condition check થવા પહેલાં code એકવાર execute થાય છે.
4. **for...in loop**: Object ના properties (keys) પર iterate કરે છે.
5. **for...of loop**: Iterable objects (arrays, strings) ના values પર iterate કરે છે.

આ loops તમને JavaScript ના વિવિધ પ્રકારના data અને control flow ને handle કરવાનું flexibility આપે છે.








-------------------------------------- REACT------------------------------------------------------------------------------

1. What is React?

ઉત્તર:  
React એ એક જાવાસ્ક્રિપ્ટ લાઇબ્રેરી છે જે યુઝર ઈન્ટરફેસ (UI) બનાવવા માટે ઉપયોગ થાય છે, ખાસ કરીને સિંગલ પેજ એપ્લિકેશન્સ (SPA) માટે. તે ડેવલપર્સને પુનઃ ઉપયોગ કરી શકાય તેવા UI કોમ્પોનન્ટ્સ બનાવવાનો અને એપ્લિકેશનની સ્ટેટ મેનેજ કરવાનો મોકો આપે છે.


1. React Components શું છે?

જવાબ:  
React components એ React એપ્લિકેશનના બિલ્ડિંગ બ્લોક્સ છે. એક કમ્પોનેન્ટ એ એક સ્વતંત્ર યુનિટ છે જે પોતાનો state મેનેજ કરે છે અને તેના props પર આધાર રાખીને UIને રેન્ડર કરે છે. React માં બે પ્રકારના કમ્પોનેન્ટ્સ હોય છે:
- Class components: પરંપરાગત કમ્પોનેન્ટ્સ જે `React.Component` થી એક્સટેન્ડ થાય છે.
- Functional components: સરળ કમ્પોનેન્ટ્સ જે JavaScript ફંક્શન્સ તરીકે ડિફાઈન થાય છે.


2. React માં class component અને functional component માં શું તફાવત છે?

જવાબ:  
- Class components: આ એ ES6 ક્લાસ છે જે `React.Component` થી એક્સટેન્ડ થાય છે અને તેમાં `render()` મેડથોડ હોવું જરૂરી છે. આ કમ્પોનેન્ટ્સ state અને lifecycle methods રાખી શકે છે.


class MyClassComponent extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}


- Functional components: આ સરળ JavaScript ફંક્શન્સ છે જે `props` સ્વીકારે છે અને JSX રિટર્ન કરે છે. React 16.8 સાથે Hooksની identification પછી, functional components હવે state મેનેજ કરી શકે છે અને lifecycle જેવી ફીચર્સનો ઉપયોગ કરી શકે છે.


function MyFunctionalComponent({ name }) {
  return <h1>Hello, {name}</h1>;
}



1. React માં conditional rendering કેવી રીતે ઇમ્પલમેન્ટ કરશો?

જવાબ:  
React માં conditional rendering સ્ટાન્ડર્ડ JavaScript ટેકનિકો દ્વારા કરવામાં આવી શકે છે, જેમ કે `if` statements, ternary operators, અથવા logical operators.


1. React માં custom hook શું છે?

જવાબ:  
Custom hook એ JavaScript ફંક્શન છે જે `use` પ્રિફિક્સથી શરૂ થાય છે અને components વચ્ચે stateful લોજિકને extract અને reuse કરવાની તક આપે છે. Custom hooks તમને લોજિકને reusable રીતે encapsulate કરવા અને components માં duplication ટાળી આપતું છે.


1. React માં events કેવી રીતે સંભાળી શકાય છે?

જવાબ:  
React માં events ને camelCase સિન્ટેક્સનો ઉપયોગ કરીને સંભાળી શકાય છે. Event handlers ફંક્શન્સ તરીકે લખાય છે અને event object આપોઆપ એ handler ને મોકલવામાં આવે છે. તમે JSX event attribute દ્વારા event handler ને એલીમેન્ટ સાથે જોડો છો.


1. React માં form input કેવી રીતે સંભાળવું?

જવાબ:  
React માં, તમે **controlled components** નો ઉપયોગ કરીને form input ને સંભાળી શકો છો, જ્યાં input ની value React state દ્વારા નિયંત્રિત થાય છે. તમે `value` prop નો ઉપયોગ કરીને input field ને state સાથે બાઈન્ડ કરો છો અને `onChange` event handler નો ઉપયોગ કરીને state ને અપડેટ કરો છો.


1. React Hooks શું છે?
React Hooks એ એવી functions છે જે તમને function components માં React state અને lifecycle features સાથે "hook in" થવાનો મોકો આપે છે. આ hooks React 16.8 માં રજૂ કરવામાં આવ્યા હતા જે functional components માં state અને side effects સાથે કામ કરવું સરળ બનાવે છે, અને class components ની જરૂરિયાત દૂર કરે છે.


1. JSX શું છે?
JSX એ JavaScript XML નો સંક્ષેપ છે, અને તે React સાથે ઉપયોગ માટે JavaScript માટેનો સિનટેક્સ એક્સ્ટેન્શન છે. JSX તમને JavaScript માં HTML જેવી કોડ લખવાની મંજૂરી આપે છે, જે પછી React દ્વારા JavaScript ફંક્શન્સમાં પરિવર્તિત થાય છે.


1. What is `React.memo`?

ઉત્તર:  
`React.memo` એ એક હાઈઅર-ઓર્ડર કોમ્પોનન્ટ છે જે ફંક્શનલ કોમ્પોનન્ટ્સને ઑપ્ટિમાઇઝ કરવામાં મદદ કરે છે. તે મેમોાઇઝ કરીને કોમ્પોનન્ટ્સને અનાવશ્યક રીરેન્ડર્સથી બચાવે છે જ્યારે તેની પ્રોપ્સ બદલાતી નથી. તે માત્ર ત્યારે જ રીરેન્ડર કરે છે જ્યારે તેને નવો પ્રોપ્સ મળતા હોય.


1. What are props in React?

ઉત્તર:  
Props (જેથી "properties" માટે સંક્ષિપ્ત છે) એ વાંચવા માટેના ડેટા છે જે પેરન્ટ કોમ્પોનન્ટમાંથી ચાઈલ્ડ કોમ્પોનન્ટમાં પસાર થાય છે. Props કોમ્પોનન્ટ ટ્રીમાંથી ડેટા fluent કરવામાં મદદ કરે છે અને કોમ્પોનન્ટને dynamical અને reusable બનાવે છે.


1. What is a class component in React?

ઉત્તર:  
ક્લાસ કોમ્પોનન્ટ એ એક જાવાસ્ક્રિપ્ટ ક્લાસ છે જે `React.Component` ને એક્સટેન્ડ કરે છે અને `render()` જેવા મિથોડ્સને સમાવેશ કરે છે જે JSX પરત આપે છે, જે કોમ્પોનન્ટના UI માટે હોય છે. ક્લાસ કોમ્પોનન્ટ્સ પાસે સ્ટેટ અને લાઈફસાયકલ મિથોડ્સ હોઈ છે, જે તેમને હૂક્સના પરિચય પહેલાં ફંક્શનલ કોમ્પોનન્ટ્સ કરતાં વધુ શક્તિશાળી બનાવે છે.


4. What are lifecycle methods in class components?

ઉત્તર:  
લાઈફસાયકલ મિથોડ્સ એ ખાસ મિથોડ્સ છે જે ક્લાસ કોમ્પોનન્ટ્સમાં નક્કી કરેલા સમયગાળા પર કોલ થાય છે (જેમ કે, જ્યારે તે બનાવાયું, અપડેટ થયું, અથવા નષ્ટ થયું). કેટલાક સામાન્ય લાઈફસાયકલ મિથોડ્સ છે:
- `componentDidMount()`: આ મિથોડ કોમ્પોનન્ટ માઉન્ટ થવા પછી એકવાર કોલ થાય છે.
- `componentDidUpdate()`: આ મિથોડ કોમ્પોનન્ટ અપડેટ થવા પછી કોલ થાય છે.
- `componentWillUnmount()`: આ મિથોડ કોમ્પોનન્ટ માઉન્ટ થયાને પહેલાં કોલ થાય છે અને તે નષ્ટ થાય છે.


1. What is rendering in React?

ઉત્તર:  
React માં રેન્ડરિંગ એ પ્રોસેસ છે જેમાં React કોમ્પોનન્ટ્સને HTML એલેમેન્ટ્સમાં બદલીને બ્રાઉઝર પર દર્શાવાય છે. React વર્ચ્યુઅલ DOM નો ઉપયોગ કરે છે, જેના દ્વારા તે રિયલ DOM સાથે સરખાવીને unnecessary અપડેટ્સને ઘટાડે છે.


2. What is the Virtual DOM in React?

ઉત્તર:  
વર્ચ્યુઅલ DOM એ રિયલ DOM નો એક ઇન-મેમોરી પ્રતિનિધિ છે. React તેનો ઉપયોગ રેન્ડરિંગને ઓપ્ટિમાઇઝ કરવા માટે કરે છે, જેમાં વર્ચ્યુઅલ DOM ને રિયલ DOM સાથે સરખાવીને ફક્ત એ જ ભાગો અપડેટ થાય છે જે બદલાયા હોય, સંપૂર્ણ DOM ને ફરીથી રેન્ડર કર્યા વિના.


1. What is React Router?

ઉત્તર:  
React Router એ React એપ્લિકેશનમાં રૂટિંગ હેન્ડલ કરવા માટેની લાઇબ્રેરી છે. તે તમને વિવિધ દૃશ્યો (કોમ્પોનન્ટ્સ) વચ્ચે નેવિગેટ કરવાની અને બ્રાઉઝર URL સંચાલિત કરવાની મંજૂરી આપે છે, જે વર્તમાન URL ના આધાર પર કોમ્પોનન્ટ્સને ડાયનેમિક રીતે રેન્ડર કરવાની રીત પ્રદાન કરે છે.


1. What is `useCallback` in React?

`useCallback` એ Reactમાં એક હૂક છે જે કૉલબેક ફંક્શનનો મેમોઇઝડ વર્ઝન આપે છે. તે સુનિશ્ચિત કરે છે કે ફંક્શન ફક્ત ત્યારે ફરીથી બનાવવામાં આવે છે જ્યારે તેની ડિપેન્ડન્સી બદલાય. આ પરફોર્મન્સ ઓપ્ટિમાઇઝ કરવા માટે મદદ કરે છે, ખાસ કરીને જ્યારે ફંક્શનને ચાઈલ્ડ કોમ્પોનન્ટ્સને પાસ કરવાનું હોય જે રેફરન્સ ઇક્વાલિટી પર આધાર રાખે છે unnecessary રી-રેન્ડરથી બચવા માટે.


1. What is `useContext` in React?

Answer:  
`useContext` એ React માં એક હૂક છે જે તમને ફંક્શનલ કોમ્પોનન્ટમાં સીધા કૉન્સટેક્સ્ટની મૂલ્યને એક્સેસ કરવાની મંજૂરી આપે છે. આનો ઉપયોગ કરીને, તમે કમ્પોનન્ટ ટ્રીમાંથી પ્રોપ્સને દરેક સ્તરે મેન્યુઅલી પસાર કર્યા વિના ડેટા પાસ કરી શકો છો.


1. What is the `useEffect` hook in React?  

Answer  :  
`useEffect` હૂકનો ઉપયોગ ફંક્શનલ કોમ્પોનન્ટ્સમાં સાયડ એફેક્ટ્સ (side effects)ને સંભાળવા માટે થાય છે. સાયડ એફેક્ટ્સમાં ડેટા ફેચિંગ, સબ્સ્ક્રિપ્શન, મેન્યુઅલ DOM મેનિપ્યુલેશન, અને ટાઇમર સેટ કરવું સમાવે છે. તે ક્લાસ કોમ્પોનન્ટ્સના લાઇફસાયકલ મેથડ્સ જેવા છે જેમ કે `componentDidMount`, `componentDidUpdate`, અને `componentWillUnmount`.


1. What is `useMemo` in React?

Answer:  
`useMemo` એ એક React હૂક છે જે ગણતરી કરેલા મૂલ્યને મેમોઈઝ કરે છે, આનો અર્થ એ છે કે તે માત્ર ત્યારે જ મૂલ્યને ફરીથી ગણશે જ્યારે ડિપેન્ડન્સીમાંનું કોઈ એક મૂલ્ય બદલાય. આનું ઉપયોગ પરફોર્મન્સને ઓપ્ટિમાઇઝ કરવા માટે થાય છે, ખાસ કરીને જ્યારે mahalલાપ વિમુક્ત ગણતરીઓને ફરીથી ન કરવી પડે જ્યારે ડિપેન્ડન્સીઓમાં કોઈ ફેરફાર ન થાય.


1. What is `useReducer` in React?

Answer:  
`useReducer` એ React માં એક hook છે જે ફંક્શનલ કોમ્પોનેન્ટમાં વધુ કંપ્લેક્સ સ્ટેટ લોજિકને મેનેજ કરવા માટે ઉપયોગ થાય છે. તે `useState` ના સમાન છે, પરંતુ તે માત્ર સ્ટેટને અપડેટ કરવાને બદલે, સ્ટેટ ટ્રાન્ઝિશન્સને હેન્ડલ કરવા માટે એક રિડ્યૂસર ફંક્શનનો ઉપયોગ કરે છે. જ્યારે સ્ટેટ લોજિક વધુ કંપ્લેક્સ હોય અથવા બહુવિધ સબ-વેલ્યુઝ અથવા એક્શનના સમાવેશ થાય ત્યારે સામાન્ય રીતે `useReducer` નો ઉપયોગ થાય છે.


1. What is `useRef` in React?

Answer:  
`useRef` એ એક હૂક છે જે તમને mutable રેફરન્સ બનાવવાની permission આપે છે જે રેન્ડર્સ દરમિયાન persists કરે છે. સ્ટેટની જેમ, `useRef` એ રેન્ડર ટ્રિગર કરતું નથી જ્યારે તેનું મૂલ્ય બદલાય છે. આનું સામાન્ય ઉપયોગ DOM તત્વોને ઍક્સેસ કરવા માટે અથવા તે mutable મૂલ્યોને સ્ટોર કરવા માટે થાય છે જે તત્વને રેન્ડર કરવી જરૂરી નથી.


1. What is the `useState` hook in React?

Answer:  
`useState` એ એક હૂક છે જે ફંક્શનલ કોમ્પોનેન્ટ્સમાં સ્ટેટ ઉમેરવા માટે ઉપયોગ થાય છે. આ હૂક એ બે ઘટકોવાળી એરે પરત આપે છે: વર્તમાન સ્ટેટ મૂલ્ય અને તેને અપડેટ કરવા માટેની ફંક્શન.


21. ડેટાબેઝ શું છે? 
ડેટાબેઝ એ ગોઠવેલા ડેટાનું સંકલન છે જે સરળતાથી ઍક્સેસ, મેનેજ અને અપડેટ કરી શકાય છે. આ માટે સામાન્ય રીતે ડેટાબેઝ મેનેજમેન્ટ સિસ્ટમ (DBMS) નો ઉપયોગ થાય છે.


1. API શું છે?  
API (Application Programming Interface) એ વિવિધ સોફ્ટવેર સિસ્ટમ્સને એકબીજા સાથે વાતચીત કરવા માટેના માધ્યમ તરીકે કાર્ય કરે છે. આ એ method અને ડેટા ફોર્મેટ્સને 
Defined કરે છે જે સિસ્‍ટમ્સ વચ્ચે માહિતી આપવાની પ્રક્રિયાને smooth બનાવે છે.


5. JSON શું છે? 
JSON (JavaScript Object Notation) એ લાઇટવેઇટ ડેટા ઇંટરચેન્જ ફોર્મેટ છે જે ડેટા ઑબ્જેક્ટ્સને માનવ વાંચી શકાય તેવી રીતે દર્શાવવાનો ઉપયોગ થાય છે.

JSON નું ઉદાહરણ:  
json  
{  
  "name": "John",  
  "age": 30  
}
